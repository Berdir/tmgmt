<?php

/*
 * @file
 * Contains tests for Translation management
 */

/**
 * Base class for tests.
 */
class TMGMTBaseTestCase extends DrupalWebTestCase {

  /**
   * A default translator using the test translator.
   *
   * @var TMGMTTranslator
   */
  protected $default_translator;

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp(array $modules = array()) {
    $modules = array_merge(array('entity', 'tmgmt', 'tmgmt_test'), $modules);
    parent::setUp($modules);

    $this->default_translator = tmgmt_translator_load('test_translator');
  }

  /**
   * Creates, saves and returns a translator.
   *
   * @return TMGMTTranslator
   */
  function createTranslator() {
    $translator = new TMGMTTranslator();
    $translator->name = $this->randomName();
    $translator->label = $this->randomName();
    $translator->translator_plugin = 'test_translator';
    $translator->settings = array(
      'key' => $this->randomName(),
      'another_key' => $this->randomName(),
    );
    $this->assertEqual(SAVED_NEW, $translator->save());

    // Assert that the translator was assigned a tid.
    $this->assertTrue($translator->tid > 0);
    return $translator;
  }

  /**
   * Creates, saves and returns a translation job.
   *
   * @return TMGMTJob
   */
  function createJob($source = 'en', $target = 'de', $uid = 1)  {
    $job = tmgmt_job_create($source, $target, $uid);
    $this->assertEqual(SAVED_NEW, $job->save());

    // Assert that the translator was assigned a tid.
    $this->assertTrue($job->tjid > 0);
    return $job;
  }


  /**
   * Sets the proper environment.
   *
   * Currently just adds a new language.
   *
   * @param string $langcode
   *   The language code.
   */
  function setEnvironment($langcode) {
    // Add the language.
    $edit = array(
      'langcode' => $langcode,
    );
    $this->drupalPost('admin/config/regional/language/add', $edit, t('Add language'));
    $this->assertText($langcode, t('Language added successfully.'));
    // This is needed to refresh the static cache of the language list.
    $languages = &drupal_static('language_list');
    $languages = NULL;
  }

}

/**
 * Basic CRUD tests.
 */
class TMGMTCRUDTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('CRUD tests'),
      'description' => t('Basic crud operations for jobs and translators'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Test crud operations of translators.
   */
  function testTranslators() {
    $translator = $this->createTranslator();

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Update the settings.
    $translator->settings['new_key'] = $this->randomString();
    $this->assertEqual(SAVED_UPDATED, $translator->save());

    $loaded_translator = tmgmt_translator_load($translator->tid);

    $this->assertEqual($translator->name, $loaded_translator->name);
    $this->assertEqual($translator->label, $loaded_translator->label);
    $this->assertEqual($translator->settings, $loaded_translator->settings);

    // Delete the translator, make sure the translator is gone.
    $translator->delete();
    $this->assertFalse(tmgmt_translator_load($translator->tid));
  }

  /**
   * Test crud operations of jobs.
   */
  function testJobs() {
    $job = $this->createJob();

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->source_language, $loaded_job->source_language);
    $this->assertEqual($job->target_language, $loaded_job->target_language);

    // Assert that the created and changed information has been set to the
    // default value.
    $this->assertTrue($loaded_job->created > 0);
    $this->assertTrue($loaded_job->changed > 0);
    $this->assertEqual(0, $loaded_job->state);

    // Update the settings.
    $job->reference = 7;
    $this->assertEqual(SAVED_UPDATED, $job->save());

    $loaded_job = tmgmt_job_load($job->tjid);

    $this->assertEqual($job->reference, $loaded_job->reference);

    // Test the job items.
    $item1 = $job->addItem('plugin', 'type', 5);
    $item2 = $job->addItem('plugin', 'type', 4);

    // Load and compare the items.
    $items = $job->getItems();
    $this->assertEqual(2, count($items));

    $this->assertEqual($item1->source_plugin, $items[$item1->tjiid]->source_plugin);
    $this->assertEqual($item1->item_type, $items[$item1->tjiid]->item_type);
    $this->assertEqual($item1->item_id, $items[$item1->tjiid]->item_id);
    $this->assertEqual($item2->source_plugin, $items[$item2->tjiid]->source_plugin);
    $this->assertEqual($item2->item_type, $items[$item2->tjiid]->item_type);
    $this->assertEqual($item2->item_id, $items[$item2->tjiid]->item_id);

    // Delete the translator, make sure the translator is gone.
    $job->delete();
    $this->assertFalse(tmgmt_job_load($job->tjid));
  }

  /**
   * Test crud operations of job items.
   */
  function testJobItems() {
    $job = $this->createJob();

    // Add some test items.
    $item1 = $job->addItem('plugin', 'type', 5);
    $item2 = $job->addItem('plugin', 'type', 4);

    // Test single load callback.
    $item = tmgmt_job_item_load($item1->tjiid);
    $this->assertEqual($item1->source_plugin, $item->source_plugin);
    $this->assertEqual($item1->item_type, $item->item_type);
    $this->assertEqual($item1->item_id, $item->item_id);

    // Test multiple load callback.
    $items = tmgmt_job_item_load_multiple(array($item1->tjiid, $item2->tjiid));

    $this->assertEqual(2, count($items));

    $this->assertEqual($item1->source_plugin, $items[$item1->tjiid]->source_plugin);
    $this->assertEqual($item1->item_type, $items[$item1->tjiid]->item_type);
    $this->assertEqual($item1->item_id, $items[$item1->tjiid]->item_id);
    $this->assertEqual($item2->source_plugin, $items[$item2->tjiid]->source_plugin);
    $this->assertEqual($item2->item_type, $items[$item2->tjiid]->item_type);
    $this->assertEqual($item2->item_id, $items[$item2->tjiid]->item_id);
  }
}

/**
 * Tests interaction between core and the plugins.
 */
class TMGMTPluginsTestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Plugin tests'),
      'description' => t('Verifies basic functionality of source and translator plugins'),
      'group' => t('Translation Management'),
    );
  }

  function createJob($action = 'translate') {
    $job = parent::createJob();

    for ($i = 1; $i < 3; $i++) {
      if ($i == 3) {
        // Explicitly define the data for the third item.
        $data['data'] = array(
          'dummy' => array(
            'deep_nesting' => array(
              '#text' => 'Stored data',
            ),
          ),
        );
        $job->addItem('test_source', 'test', $i, array($data));
      }
      $job->addItem('test_source', 'test', $i);
    }

    // Manually specify the translator for now.
    $job->translator = $this->default_translator->name;
    $job->settings = array('action' => $action);

    return $job;
  }

  function testBasicWorkflow() {

    // Submit a translation job.
    $submit_job = $this->createJob('submit');
    $submit_job->requestTranslation();
    $submit_job = tmgmt_job_load($submit_job->tjid);
    $this->assertTrue($submit_job->isSubmitted());
    $messages = $submit_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual(TMGMT_JOB_STATE_NEW, $last_message->state_before);
    $this->assertEqual(TMGMT_JOB_STATE_SUBMITTED, $last_message->state_after);
    $this->assertEqual('Test submit', $last_message->message);

    // Translate a job.
    $translate_job = $this->createJob('translate');
    $translate_job->requestTranslation();
    $translate_job = tmgmt_job_load($translate_job->tjid);
    $this->assertTrue($translate_job->isNeedsReview());
    $messages = $translate_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual(TMGMT_JOB_STATE_NEW, $last_message->state_before);
    $this->assertEqual(TMGMT_JOB_STATE_REVIEW, $last_message->state_after);
    $this->assertEqual('Test translation created', $last_message->message);

    $i = 1;
    foreach ($translate_job->getItems() as $item) {
      // Check the translated text.
      if ($i != 3) {
        $expected_text = 'de_Text for job item with type ' . $item->item_type . ' and id ' . $item->item_id . '.';
      }
      else {
        // The third item has an explicitly stored data value.
        $expected_text = 'de_Stored data';
      }
      $this->assertEqual($expected_text, $item->translation['dummy']['deep_nesting']['#text']);
      $i++;
    }

    $translate_job->accepted('Job accepted');

    $messages = $translate_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual(TMGMT_JOB_STATE_REVIEW, $last_message->state_before);
    $this->assertEqual(TMGMT_JOB_STATE_ACCEPTED, $last_message->state_after);
    $this->assertEqual('Job accepted', $last_message->message);
    $this->assertEqual('status', $last_message->type);

    // Check if the translations have been "saved".
    foreach ($translate_job->getItems() as $item) {
      $this->assertTrue(variable_get('tmgmt_test_saved_translation_' . $item->item_type . '_' . $item->item_id, FALSE));
    }

    // A rejected job.
    $reject_job = $this->createJob('reject');
    $reject_job->requestTranslation();
    // Still rejected.
    $this->assertTrue($reject_job->isRejected());

    $messages = $reject_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual(TMGMT_JOB_STATE_NEW, $last_message->state_before);
    $this->assertEqual(TMGMT_JOB_STATE_REJECTED, $last_message->state_after);
    $this->assertEqual('This is not supported', $last_message->message);
    $this->assertEqual('error', $last_message->type);

    // A failing job.
    $failing_job = $this->createJob('fail');
    $failing_job->requestTranslation();
    // Still new.
    $this->assertTrue($failing_job->isNew());

    $messages = $failing_job->getMessages();
    $last_message = end($messages);
    $this->assertEqual(TMGMT_JOB_STATE_NEW, $last_message->state_before);
    $this->assertEqual(TMGMT_JOB_STATE_NEW, $last_message->state_after);
    $this->assertEqual('Service not reachable', $last_message->message);
    $this->assertEqual('error', $last_message->type);
  }
}

/**
 * Test the userinterface of tmgmt, for example the checkout form.
 */
class TMGMTUITestCase extends TMGMTBaseTestCase {

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('UI tests'),
      'description' => t('Verifies basic functionality of the user interface'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_ui', 'tmgmt_file'));
  }

  /**
   * Test the page callbacks to create jobs and check them out.
   */
  function dtestCheckoutForm() {

    $this->admin_user = $this->drupalCreateUser(array('administer languages', 'access administration pages', 'administer content types', 'administer taxonomy'));
    $this->drupalLogin($this->admin_user);
    $this->setEnvironment('de');
    $this->setEnvironment('es');
    $this->setEnvironment('el');

    $user = $this->drupalCreateUser(array('access administration pages', 'access tmgmt ui'));
    $this->drupalLogin($user);

    // Add a first item to the job. This will auto-create the job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

    // Check checkout form.
    $this->assertText('test_source:test:1');

    // Add two more job items.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/2,3/' . $tjid);

    // Check checkout form.
    $this->assertText('test_source:test:1');
    $this->assertText('test_source:test:2');
    $this->assertText('test_source:test:3');

    // Attempt to add item from a different source language.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/en/test_source/test/4/' . $tjid);

    // Check checkout form.
    $this->assertText("The source language of your item doesn't match the source language of your job.");
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');
    $this->assertText('test_source:test:2');
    $this->assertText('test_source:test:3');
    $this->assertText('German');
    $this->assertText($this->default_translator->label);

    // @todo: Test ajax functionality.

    // Attempt to translate into english.
    $edit = array(
      'target_language' => 'el',
      'settings[action]' => 'translate',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertText(t('@translator can not translate from @source to @target.', array('@translator' => 'Test translator (auto created)', '@source' => 'German', '@target' => 'Greek')));

    // Job still needs to be in state new.
    $job = tmgmt_job_load($tjid, FALSE);
    $this->assertTrue($job->isNew());

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'translate',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));

    // Job needs to be in state review.
    entity_get_controller('tmgmt_job')->resetCache(array($tjid));
    $job = tmgmt_job_load($tjid);
    $this->assertTrue($job->isNeedsReview());
    $this->assertText(t('Test translation created'));
    $this->assertNoText(t('Test translator called'));

    // Test redirection.
    $this->assertText(t('Translation Management'));

    // Another job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

     // Check checkout form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'submit',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertText(t('Test submit'));
    $job = tmgmt_job_load($tjid, FALSE);
    $this->assertTrue($job->isSubmitted());

    // Another job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

     // Check checkout form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'reject',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertText(t('This is not supported'));
    $job = tmgmt_job_load($tjid, FALSE);
    $this->assertTrue($job->isRejected());

    // Another job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

     // Check checkout form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'fail',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    $this->assertText(t('Service not reachable'));
    entity_get_controller('tmgmt_job')->resetCache(array($tjid));
    $job = tmgmt_job_load($tjid);
    $this->assertTrue($job->isNew());

    // Verify that we are still on the form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');

    // Another job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/de/test_source/test/1');
    preg_match('|admin/config/regional/tmgmt/jobs/([0-9]+)/manage|', $this->getUrl(), $matches);
    $tjid = $matches[1];

     // Check checkout form.
    $this->assertText('You can provide a label for this job in order to identify it easily later on.');
    $this->assertText('test_source:test:1');

    $edit = array(
      'target_language' => 'es',
      'settings[action]' => 'not_translatable',
    );
    $this->drupalPost(NULL, $edit, t('Submit to translator'));
    // @todo Update to correct failure message.
    $this->assertText(t('Fail'));
    entity_get_controller('tmgmt_job')->resetCache(array($tjid));
    $job = tmgmt_job_load($tjid);
    $this->assertTrue($job->isNew());

    // Attempt to add items to a non-existing job.
    $this->drupalGet('admin/config/regional/tmgmt/add-item/en/test_source/test/5/' . ($tjid + 1));
    $this->assertResponse(404);
  }

  /**
   * Tests the tmgmt_ui_job_checkout() function.
   */
  function testCheckoutFunction() {
    $job = $this->createJob();

    // Check out a job when only the test translator is available. That one has
    // settings, so a checkout is necessary.
    $redirect = tmgmt_ui_job_checkout(array($job));
    $uri = $job->uri();
    $this->assertEqual($uri['path'] . '/manage', $redirect);
    $this->assertTrue($job->isNew());
    $job->delete();

    // Hide settings on the test translator.
    $default_translator = tmgmt_translator_load('test_translator');
    $default_translator->settings = array(
      'expose_settings' => FALSE,
    );
    $job = $this->createJob();

    $redirect = tmgmt_ui_job_checkout(array($job));
    $this->assertFalse($redirect);
    $this->assertTrue($job->isNeedsReview());

    // A job without target language needs to be checked out.
    $job = $this->createJob('en', '');
    $redirect = tmgmt_ui_job_checkout(array($job));    $uri = $job->uri();
    $this->assertEqual($uri['path'] . '/manage', $redirect);
    $this->assertTrue($job->isNew());

    // Create a second file translator. This should check
    // out immediatly.
    $job = $this->createJob();

    $second_translator = $this->createTranslator();
    $second_translator->settings = array(
      'expose_settings' => FALSE,
    );
    $second_translator->save();

    $redirect = tmgmt_ui_job_checkout(array($job));
    $uri = $job->uri();
    $this->assertEqual($uri['path'] . '/manage', $redirect);
    $this->assertTrue($job->isNew());
  }
}

/**
 * Test the helper functions in tmgmt.module.
 */
class TMGMTHelperTestCase extends TMGMTBaseTestCase {
  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Helper functions Test case'),
      'description' => t('Helper functions for other modules'),
      'group' => t('Translation Management'),
    );
  }

  /**
   * Tests tmgmt_job_match_item()
   *
   * @see tmgmt_job_match_item
   */
  function testTMGTJobMatchItem() {
    $this->admin_user = $this->drupalCreateUser(array('administer languages', 'access administration pages', 'administer content types', 'administer taxonomy'));
    $this->drupalLogin($this->admin_user);
    $this->setEnvironment('fr');
    $this->setEnvironment('es');

    // Add a job from en to fr and en to sp.
    $job_en_fr = $this->createJob('en', 'fr');
    $job_en_sp = $this->createJob('en', 'es');

    // Add a job which has existing source-target combinations.
    $this->assertEqual($job_en_fr->tjid, tmgmt_job_match_item('en', 'fr')->tjid);
    $this->assertEqual($job_en_sp->tjid, tmgmt_job_match_item('en', 'es')->tjid);

    // Add a job which has no existing source-target combination.
    $this->assertTrue(tmgmt_job_match_item('fr', 'es'));
  }

}
