<?php

/**
 * @file
 * Installation hooks for the Translation Management module.
 */

/**
 * Implements hook_uninstall().
 */
function tmgmt_uninstall() {
  // Remove all variables that we added.
  variable_del('tmgmt_quick_checkout');
  variable_del('tmgmt_auto_accept');
  variable_del('tmgmt_purge_finished');
}

/**
 * Implements hook_schema().
 */
function tmgmt_schema() {
  $schema['tmgmt_job'] = array(
    'description' => 'A translation job represents a translation order that can be assigned to a translator.',
    'fields' => array(
      'tjid' => array(
        'description' => 'The identifier of the translation job.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'source_language' => array(
        'description' => 'The source language of the data.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
      ),
      'target_language' => array(
        'description' => 'The language the data should be translated to.',
        'type' => 'varchar',
        'length' => 12,
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => 'The state of the translation job.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'created' => array(
        'description' => 'Created timestamp.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'changed' => array(
        'description' => 'Changed timestamp.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'translator' => array(
        'description' => 'Machine name of the translator.',
        'type' => 'varchar',
        'length' => 128,
      ),
      'settings' => array(
        'description' => 'Translator specific configuration and context for this job.',
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'reference' => array(
        'description' => 'Remote identifier of this translation job.',
        'type' => 'varchar',
        'length' => 256,
      ),
      'uid' => array(
        'description' => 'uid of the job creator',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'Optional user provided label of the job.',
        'type' => 'varchar',
        'length' => 256,
      ),
    ),
    'primary key' => array('tjid'),
    'indexes' => array(
      'state' => array('state'),
      'reference' => array('reference'),
    ),
  );

  $schema['tmgmt_job_item'] = array(
    'description' => 'A job item connects a source to a translation job.',
    'fields' => array(
      'tjiid' => array(
        'description' => 'The identifier of the translation job item.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'tjid' => array(
        'description' => 'The identifier of the translation job.',
        'type' => 'int',
        'not null' => TRUE,
        'unsigned' => TRUE,
      ),
      'plugin' => array(
        'description' => 'Indicates the plugin which provides this item.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'item_type' => array(
        'description' => 'The type of the item, e.g. the entity type.',
        'type' => 'varchar',
        'length' => 128,
      ),
      'item_id' => array(
        'description' => 'The unique id (within the given item type) of the item.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'state' => array(
        'description' => 'The state of the translation job item.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'Can be used by the source plugin to store the data if it can not be retrieved anymore later on.',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'changed' => array(
        'description' => 'Changed timestamp.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'count_pending' => array(
        'description' => 'Counter for all pending data items.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'count_translated' => array(
        'description' => 'Counter for all translated data items.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'count_approved' => array(
        'description' => 'Counter for all approved data items.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'word_count' => array(
        'description' => 'Word count of all texts contained in this job item.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('tjiid'),
    'indexes' => array(
      'job_id' => array('tjid'),
    ),
    'foreign keys' => array(
      'job' => array(
        'table' => 'tmgmt_job',
        'columns' => array('tjid'),
      ),
    ),
  );

  $schema['tmgmt_translator'] = array(
    'description' => 'A translator is a combination of a translator type and type specific configuration.',
    'fields' => array(
      'tid' => array(
        'description' => 'The identifier of the translator.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => 'Machine name identifier of the translator.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'label' => array(
        'description' => 'Label of the translator.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'description' => array(
        'description' => 'Description of the translator.',
        'type' => 'text',
        'size' => 'medium',
      ),
      'plugin' => array(
        'description' => 'Name of the translator service plugin.',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
      'settings' => array(
        'description' => 'Translator specific settings.',
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'weight' => array(
        'description' => 'The weight of the translator.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'status' => array(
        'description' => 'The exportable status of the entity.',
        'type' => 'int',
        'not null' => TRUE,
        // Set the default to ENTITY_CUSTOM without using the constant as it is
        // not safe to use it at this point.
        'default' => 0x01,
        'size' => 'tiny',
      ),
      'module' => array(
        'description' => 'The name of the providing module if the entity has been defined in code.',
        'type' => 'varchar',
        'length' => 255,
        'not null' => FALSE,
      ),
    ),
    'primary key' => array('tid'),
    'unique keys' => array(
      'name' => array('name'),
    ),
  );

  $schema['tmgmt_message'] = array(
    'description' => 'A log message can be used to store events that affect a job.',
    'fields' => array(
      'mid' => array(
        'description' => 'The identifier of the message.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'tjid' => array(
        'description' => 'The identifier of the translation job that the message belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'tjiid' => array(
        'description' => 'The identifier of the translation job item that the message belongs to.',
        'type' => 'int',
        'unsigned' => TRUE,
      ),
      'message' => array(
        'description' => 'The language into the data should be translated.',
        'type' => 'text',
        'size' => 'big',
      ),
      'variables' => array(
        'description' => 'The variables of the message as expected by t().',
        'type' => 'text',
        'size' => 'big',
        'serialize' => TRUE,
      ),
      'created' => array(
        'description' => 'Created timestamp.',
        'type' => 'int',
        'unsigned' => TRUE,
        'not null' => TRUE,
      ),
      'type' => array(
        'description' => 'Type of the message (debug, notice, warning or error)',
        'type' => 'varchar',
        'length' => 128,
        'not null' => TRUE,
      ),
    ),
    'primary key' => array('mid'),
    'indexes' => array(
      'tjid' => array('tjid'),
      'tjiid' => array('tjiid'),
    ),
  );

  // Clone the schema for our cache table from Drupal core.
  $schema['cache_tmgmt'] = drupal_get_schema_unprocessed('system', 'cache');

  // Clone the schema for the entity cache module if it is enabled.
  if (module_exists('entitycache')) {
    $schema['cache_entity_tmgmt_translator'] = drupal_get_schema_unprocessed('system', 'cache');
  }

  return $schema;
}

/**
 * Merge the content of the 'translation' field into the 'data' field.
 */
function tmgmt_update_7000(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(*) FROM {tmgmt_job_item}')->fetchField();
  }

  $results = db_select('tmgmt_job_item', 'tji')
    ->fields('tji', array('tjiid', 'data', 'translation'))
    ->range($sandbox['progress'], 50)
    ->orderBy('tjiid', 'ASC')
    ->execute();

  foreach ($results as $item) {
    foreach (tmgmt_flatten_data($item->translation) as $key => $translation) {
      if (!empty($item->data)) {
        $key = explode('][', $key);
        drupal_array_set_nested_value(unserialize($item->data), array_merge($key, array('#translation')), $translation);
        db_update('tmgmt_job_item')
          ->condition('tjiid', $item->tjiid)
          ->fields(array('data' => serialize($item->data)))
          ->execute();
      }
    }

    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
}

/**
 * Remove the 'translation' field from the job item entity.
 */
function tmgmt_update_7001() {
  db_drop_field('tmgmt_job_item', 'translation');
}

/**
 * Add counter columns to {tmgmt_job_item}.
 */
function tmgmt_update_7002() {
  // Defining schema of additional fields.
  $schema = array(
    'count_pending' => array(
      'description' => 'Counter for all pending data items.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
    'count_translated' => array(
      'description' => 'Counter for all translated data items.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
    'count_approved' => array(
      'description' => 'Counter for all approved data items.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    ),
  );
  // Add aditional fields to db.
  foreach ($schema as $field => $spec) {
    db_add_field('tmgmt_job_item', $field, $spec);
  }
}

/**
 * Set counters for existing job items.
 */
function tmgmt_update_7003(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_tjiid'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(tjiid) FROM {tmgmt_job_item}')->fetchField();
  }
  $tjiids = db_query('SELECT tjiid FROM {tmgmt_job_item} WHERE tjiid > :last_tjiid ORDER BY tjiid LIMIT 10', array( ':last_tjiid' => $sandbox['last_tjiid']))->fetchCol();
  foreach (entity_load('tmgmt_job_item', $tjiids) as $job_item) {
    // Counters are updated when saving a job item.
    $job_item->save();
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  $sandbox['last_tjiid'] = $job_item->tjiid;
}

/**
 * Replace the [#translation][#finished] attribute with [#status].
 */
function tmgmt_update_7004(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_tjiid'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(tjiid) FROM {tmgmt_job_item}')->fetchField();
  }
  $tjiids = db_query('SELECT tjiid FROM {tmgmt_job_item} WHERE tjiid > :last_tjiid ORDER BY tjiid LIMIT 10', array(':last_tjiid' => $sandbox['last_tjiid']))->fetchCol();
  foreach (entity_load('tmgmt_job_item', $tjiids) as $job_item) {
    $data = tmgmt_flatten_data($job_item->getData());
    $data = array_filter($data, '_tmgmt_filter_data');
    foreach ($data as $key => $values) {
      if (!empty($values['#translation']['#finished'])) {
        $finished = $values['#translation']['#finished'];
        unset($values['#translation']['#finished']);
        drupal_array_set_nested_value($job_item->data, array_merge($key, array('#translation')), $values['#translation']);
        if ($finished && (empty($values['#status']) || $values['#status'] == TMGMT_DATA_ITEM_STATE_PENDING)) {
          $values['#status'] = TMGMT_DATA_ITEM_STATE_TRANSLATED;
        }
        $job_item->updateData($key, $values);
      }
    }
    $job_item->save();
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  $sandbox['last_tjiid'] = $job_item->tjiid;
}

/**
 * Add word count column to {tmgmt_job_item}.
 */
function tmgmt_update_7005() {
  if (!db_field_exists('tmgmt_job_item', 'word_count')) {
    $spec = array(
      'description' => 'Word count of all texts contained in this job item.',
      'type' => 'int',
      'not null' => TRUE,
      'default' => 0,
    );
    db_add_field('tmgmt_job_item', 'word_count', $spec);
  }
}

/**
 * Set word count for existing job items.
 */
function tmgmt_update_7006(&$sandbox) {
  if (!isset($sandbox['progress'])) {
    $sandbox['progress'] = 0;
    $sandbox['last_tjiid'] = 0;
    $sandbox['max'] = db_query('SELECT COUNT(tjiid) FROM {tmgmt_job_item}')->fetchField();
  }
  $tjiids = db_query('SELECT tjiid FROM {tmgmt_job_item} WHERE tjiid > :last_tjiid ORDER BY tjiid LIMIT 10', array( ':last_tjiid' => $sandbox['last_tjiid']))->fetchCol();
  foreach (entity_load('tmgmt_job_item', $tjiids) as $job_item) {
    // Counters are updated when saving a job item.
    $job_item->save();
    $sandbox['progress']++;
  }

  $sandbox['#finished'] = empty($sandbox['max']) ? 1 : ($sandbox['progress'] / $sandbox['max']);
  $sandbox['last_tjiid'] = $job_item->tjiid;
}
