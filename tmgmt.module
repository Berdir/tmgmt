<?php

/**
 * @file
 * Main module file for the Translation Management module.
 */

/**
 * @addtogroup tmgmt_job
 * @{
 */
/**
 * A new translation job.
 *
 * In the default user interface, jobs with this state are so called cart jobs.
 * Each user gets his cart jobs listed in a block and can check them out.
 */
define('TMGMT_JOB_STATE_NEW', 0);

/**
 * A translation job that has been submitted to the translator.
 *
 * Translator plugins are responsible for setting this state in their
 * implementation of
 * TMGMTTranslatorPluginControllerInterface::requestTranslation().
 */
define('TMGMT_JOB_STATE_SUBMITTED', 1);

/**
 * A translation job that has been rejected by the translator.
 *
 * The translator plugin can use this state if the job has been actively
 * rejected. However, this should be avoided by doing the necessary checks
 * in the canTranslate() method and in the job configuration settings.
 *
 * A rejected job can be re-submitted.
 */
define('TMGMT_JOB_STATE_REJECTED', 2);

/**
 * The translation job was translated and needs to be reviewed.
 *
 * This state needs to be set by the translator plugin once the job has been
 * completely translated.
 */
define('TMGMT_JOB_STATE_REVIEW', 3);

/**
 * The translation has been accepted and the job is finished.
 *
 * Once the job has been accepted, the source plugins are called to update their
 * sources with the translated data.
 */
define('TMGMT_JOB_STATE_ACCEPTED', 4);

/**
 * The translation job has been cancelled.
 *
 * A job can be cancelled at any time. If he is currently in the submitted state
 * the translator plugin is asked if this translation can be cancelled and needs
 * to confirm it by returning TRUE in cancelTranslation().
 */
define('TMGMT_JOB_STATE_CANCELLED', 5);

/**
 * The translation job has been finished.
 *
 * Not yet used.
 */
define('TMGMT_JOB_STATE_FINISHED', 6);

/**
 * @} End of "addtogroup tmgmt_job".
 */
/**
 * String used to delimit flattened array keys.
 */
define('TMGMT_ARRAY_DELIMITER', '][');

/**
 * The selected translator is available for the target language.
 */
define('TMGMT_TRANSLATOR_AVAILABLE', 0);

/**
 * The selected translator is not available yet.
 */
define('TMTGT_TRANSLATOR_NOT_AVAILABLE', 1);

/**
 * The selected translator is not available for the selected language.
 */
define('TMGMT_TRANSLATOR_NOT_AVAILABLE_FOR_LANGUAGE', 2);

/**
 * Implements hook_entity_info().
 */
function tmgmt_entity_info() {
  $info['tmgmt_job'] = array(
    'label' => t('Translation Management Job'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTJobController',
    'metadata controller class' => 'TMGMTJobMetadataController',
    'views controller class' => 'TMGMTJobViewsController',
    'entity class' => 'TMGMTJob',
    'base table' => 'tmgmt_job',
    'uri callback' => 'entity_class_uri',
    'label callback' => 'entity_class_label',
    'access callback' => 'tmgmt_job_access',
    'entity keys' => array(
      'id' => 'tjid',
    ),
  );
  $info['tmgmt_job_item'] = array(
    'label' => t('Translation Management Job Item'),
    'module' => 'tmgmt',
    'controller class' => 'EntityAPIController',
    'metadata controller class' => 'TMGMTJobItemMetadataController',
    'views controller class' => 'TMGMTJobItemViewsController',
    'entity class' => 'TMGMTJobItem',
    'base table' => 'tmgmt_job_item',
    'label callback' => 'entity_class_label',
    'uri callback' => 'entity_class_uri',
    'access callback' => 'tmgmt_job_attachment_access',
    'entity keys' => array(
      'id' => 'tjiid',
    ),
  );
  $info['tmgmt_job_message'] = array(
    'label' => t('Translation Management Job Message'),
    'module' => 'tmgmt',
    'controller class' => 'EntityAPIController',
    'metadata controller class' => 'TMGMTJobMessageMetadataController',
    'views controller class' => 'TMGMTJobMessageViewsController',
    'entity class' => 'TMGMTJobMessage',
    'base table' => 'tmgmt_job_message',
    'label callback' => 'entity_class_label',
    'access callback' => 'tmgmt_job_attachment_access',
    'entity keys' => array(
      'id' => 'tjmid',
    ),
  );
  $info['tmgmt_translator'] = array(
    'label' => t('Translation Management Translator'),
    'module' => 'tmgmt',
    'controller class' => 'TMGMTTranslatorController',
    'metadata controller class' => 'TMGMTTranslatorMetadataController',
    'entity class' => 'TMGMTTranslator',
    'base table' => 'tmgmt_translator',
    'exportable' => TRUE,
    // @todo: Fix entity api to check if the entitycache module is enabled.
    // 'entity cache' => TRUE,
    'access callback' => 'tmgmt_translator_access',
    'entity keys' => array(
      'id' => 'tid',
      'name' => 'name',
      'label' => 'label',
    ),
  );
  return $info;
}

/**
 * Implements hook_permission().
 */
function tmgmt_permission() {
  $perms = array();
  $perms['administer tmgmt'] = array(
    'title' => t('Administer Translation Management'),
  );
  // @todo Remove this access check once entity access is finished.
  $perms['access tmgmt ui'] = array(
    'title' => t('Access Translation Management UI'),
  );
  return $perms;
}

/**
 * Implements hook_modules_installed().
 */
function tmgmt_modules_installed($modules) {
  foreach (tmgmt_translator_plugin_info() as $key => $info) {
    // Check if this translator plugin has been added by one of the recently
    // installed modules.
    if (!empty($info['auto create']) && in_array($info['module'], $modules)) {
      tmgmt_translator_auto_create($key);
    }
  }
}

/**
 * Returns an array of languages that are available for translation.
 *
 * @return array
 *   An array of languages in ISO format.
 */
function tmgmt_available_languages($exclude = array()) {
  $languages = entity_metadata_language_list();
  // Remove LANGUAGE_NONE and the language in $exclude from the list of
  // available languages and then apply a filter that only leaves the supported
  // target languages on the list.
  unset($languages[LANGUAGE_NONE]);
  foreach ($exclude as $item) {
    unset($languages[$item]);
  }
  return $languages;
}

/**
 * Returns the label of a language.
 *
 * @param $language
 *   A language in ISO format.
 * @return string
 *   The label of the language.
 */
function tmgmt_language_label($language) {
  $languages = entity_metadata_language_list();
  if (isset($languages[$language])) {
    return $languages[$language];
  }
}

/**
 * @addtogroup tmgmt_job
 * @{
 */

/**
 * Loads a translation job.
 */
function tmgmt_job_load($tjid) {
  $jobs = tmgmt_job_load_multiple(array($tjid), array());
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation jobs.
 */
function tmgmt_job_load_multiple(array $tjids = array(), $conditions = array()) {
  return entity_load('tmgmt_job', $tjids, $conditions);
}

/**
 * Queries the database for all job entities that host a job item that
 * links to a specific source object.
 *
 * @param $source_type
 *   The source type.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 *
 * @return
 *   An array of job entities.
 */
function tmgmt_job_load_multiple_by_source($source_type, $item_type, $item_id) {
  $query = db_select('tmgmt_job', 'tj')->fields('tj', array('tjid'));
  $query->innerJoin('tmgmt_job_item', 'tji', 'tj.tjid = tji.tjid');
  $jobs = $query->execute()->fetchCol();
  if (!empty($jobs)) {
    return tmgmt_job_load_multiple($jobs);
  }
  return array();
}

/**
 * @todo Is this really a good function name?
 *
 * Returns a job which matches the requested source- and target language by
 * user. If no job exists, a new job object will be created.
 *
 * @param $source_language
 *   The source language from which should be translated.
 * @param $target_language
 *   The target language into which should be translated.
 * @param $account
 *   (Optional) A user object. Defaults to the currently logged in user.
 *
 * @return TMGMTJob
 *   The job entity.
 */
function tmgmt_job_match_item($source_language, $target_language, $account = NULL) {
  $account = isset($account) ? $account : $GLOBALS['user'];
  $query = new EntityFieldQuery();
  $result = $query->entityCondition('entity_type', 'tmgmt_job')
    ->propertyCondition('source_language', $source_language)
    ->propertyCondition('target_language', $target_language)
    ->propertyCondition('uid', $account->uid)
    ->propertyCondition('state', TMGMT_JOB_STATE_NEW)
    ->execute();
  if (!empty($result['tmgmt_job'])) {
    return tmgmt_job_load(reset($result['tmgmt_job'])->tjid);
  }
  else {
    return tmgmt_job_create($source_language, $target_language, $account->uid);
  }
}

/**
 * Creates a translation job.
 *
 * @param $source_language
 *   The source language from which should be translated.
 * @param $target_language
 *   The target language into which should be translated.
 * @param $values
 *   (Optional) An array of additional entity values.
 *
 * @return TMGMTJob
 *   The job entity.
 */
function tmgmt_job_create($source_language, $target_language, $uid = NULL, array $values = array()) {
  return entity_create('tmgmt_job', array_merge($values, array(
    'source_language' => $source_language,
    'target_language' => $target_language,
    'uid' => $uid,
  )));
}

/**
 * Access callback for the job entity.
 */
function tmgmt_job_access($op, $job = NULL, $account = NULL) {
  if (isset($job)) {
    if ($op == 'review') {
      // Simple check for wether the job needs a review for now.
      return $job->isNeedsReview();
    }
  }
  // Return TRUE in all cases for now :)
  return TRUE;
  switch ($op) {
    case 'create':
      return user_access('tmgmt create new jobs', $account);
    case 'view':
    case 'update':
    case 'delete':
      if (isset($job)) {
        if ($job->isAuthor($account)) {
          // Covers cases in which the user described by $account is the author.
          return user_access('tmgmt ' . $op . ' own jobs', $account) || user_access('tmgmt ' . $op . ' all jobs', $account);
        }
        else {
          // Covers all other cases.
          return user_access('tmgmt ' . $op . ' all jobs', $account);
        }
      }
    default:
      return FALSE;
  }
}

/**
 * Access callback for checking out a job.
 *
 * @param TMGMTJob $job
 *   A translation job.
 * @param $account
 *   (Optional) The user to check access permissions for. Defaults to the
 *   current user.
 *
 * @return bool
 *   TRUE if the job can be checked out and the user has access to do this,
 *   FALSE otherwise.
 */
function tmgmt_job_checkout_access(TMGMTJob $job, $account = NULL) {
  if ($job->isNew() || $job->isRejected() || $job->isCancelled()) {
    return tmgmt_job_access('checkout', $job, $account);
  }
  return FALSE;
}

/**
 * Static method to retrieve a labeled list of all available states.
 *
 * @return array
 *   A list of all available states.
 */
function tmgmt_job_states() {
  return array(
    TMGMT_JOB_STATE_NEW => t('New'),
    TMGMT_JOB_STATE_SUBMITTED => t('Submitted'),
    TMGMT_JOB_STATE_REJECTED => t('Rejected'),
    TMGMT_JOB_STATE_REVIEW => t('Needs review'),
    TMGMT_JOB_STATE_ACCEPTED => t('Accepted'),
    TMGMT_JOB_STATE_CANCELLED => t('Cancelled'),
  );
}

/**
 * Loads a translation job item.
 *
 * @param $tjiid
 *   A job item id.
 *
 * @return TMGMTJobItem
 *   The loaded job item.
 */
function tmgmt_job_item_load($tjiid) {
  $jobs = tmgmt_job_item_load_multiple(array($tjiid), array());
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * @todo Looks ineffective to me. Let's remove that loop.
 *
 * Loads a translation job item per source. It will order the related jobs by
 * the latest change.
 *
 * @param $source_type
 *   The source type.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param $source_language
 *   The source language.
 * @param $target_languages
 *   (Optional) An array of target language.
 *
 * @return TMGMTJobItem
 *   The loaded job items.
 */
function tmgmt_job_load_by_source($source_plugin, $item_type, $item_id, $source_language, $target_languages = array()) {
  if (empty($target_languages)) {
    $available_languages = entity_metadata_language_list();
    unset($available_languages[LANGUAGE_NONE], $available_languages[$source_language]);
    $target_languages = array_keys($available_languages);
  }
  $jobs = array();
  // @todo Why are we looping here? Can't this be done with an IN statement?
  foreach ($target_languages as $target_language) {
    $query = db_select('tmgmt_job_item', 'ji');
    $query->join('tmgmt_job', 'j', 'j.tjid = ji.tjid AND j.target_language = :target_language', array(':target_language' => $target_language));
    $query = $query->fields('j', array('tjid'))
      ->condition('source_plugin', $source_plugin)
      ->condition('item_type', $item_type)
      ->condition('item_id', $item_id)
      ->orderBy('changed', 'DESC')
      ->range(0, 1);
    if ($tjid = $query->execute()->fetchfield()) {
      $jobs[$target_language] = tmgmt_job_load($tjid);
    }
  }
  return isset($jobs) ? $jobs : FALSE;
}

/**
 * Loads translation job items.
 */
function tmgmt_job_item_load_multiple($tjiids = array(), $conditions = array()) {
  return entity_load('tmgmt_job_item', $tjiids, $conditions);
}

/**
 * Creates a translation job item.
 *
 * @param $source_plugin
 *   The plugin name.
 * @param $item_type
 *   The source item type.
 * @param $item_id
 *   The source item id.
 * @param $values
 *   (Optional) An array of additional entity values to be set.
 *
 * @return TMGMTJobItem
 *   The created, not yet saved, job item entity.
 */
function tmgmt_job_item_create($source_plugin, $item_type, $item_id, array $values = array()) {
  return entity_create('tmgmt_job_item', array_merge($values, array(
    'source_plugin' => $source_plugin,
    'item_type' => $item_type,
    'item_id' => $item_id,
  )));
}

/**
 * Access callback for the job item entity.
 *
 * @param $op
 *   The operation being performed. One of 'view', 'update', 'create' or
 *   'delete'.
 * @param $attachment
 *   (Optional) Either a TMGMTJobItem entity or a TMGMTJobMessage entity.
 * @param $account
 *   The user to check for. Leave it to NULL to check for the global user.
 *
 * @return boolean
 *   TRUE if the user has access to the performed operation on the job that this
 *   job item or message is attached to, FALSE otherwise.
 */
function tmgmt_job_attachment_access($op, $attachment = NULL, $account = NULL) {
  // Return TRUE in all cases for now :)
  return TRUE;
  // We just forward the access request to the job entity.
  if (isset($attachment) && $job = $attachment->getJob()) {
    return tmgmt_job_access($op, $job, $account);
  }
  // If we can't retrieve the job entity, we can't grant access.
  return FALSE;
}

/**
 * Loads a translation job message.
 *
 * @param $tjmid
 *   A job message id.
 *
 * @return TMGMTJobMessage
 *   A job message entity or FALSE if the query didn't yield any results.
 */
function tmgmt_job_message_load($tjmid) {
  $jobs = tmgmt_job_load_multiple(array($tjmid));
  return $jobs ? reset($jobs) : FALSE;
}

/**
 * Loads translation job messages.
 */
function tmgmt_job_message_load_multiple($tjmids = array(), $conditions = array()) {
  return entity_load('tmgmt_job_message', $tjmids, $conditions);
}

/**
 * Creates a translation job message.
 *
 * @param $status_before
 *   The status before the event occurred.
 * @param $status_after
 *   The status after the event occurred.
 * @param $message
 *   (Optional) The message to be saved.
 * @param $variables
 *   (Optional) An array of variables to replace in the message on display.
 * @param $values
 *   (Optional) An array of additional entity values to be set.
 *
 * @return TMGMTJobItem
 *   The created, not yet saved, job item entity.
 */
function tmgmt_job_message_create($status_before, $status_after, $message = '', $variables = array(), $values = array()) {
  return entity_create('tmgmt_job_message', array_merge($values, array(
    'state_before' => $status_before,
    'state_after' => $status_after,
    'message' => $message,
    'variables' => $variables,
  )));
}
/**
 * @} End of "addtogroup tmgmt_job".
 */
/**
 * @addtogroup tmgmt_translator
 * @{
 */

/**
 * Access callback for the translator entity.
 */
function tmgmt_translator_access($op, TMGMTTranslator $translator = NULL, $account = NULL) {
  if (isset($translator) && !$translator->getPluginController()) {
    return FALSE;
  }
  // Only administrators are allowed to manage translator entities.
  return user_access('administer tmgmt', $account);
}

/**
 * Checks whether a translator entity with the supplied name already exists.
 *
 * We can't user entity_load or any of its wrapper functions for that as our
 * translator entity controller filters out broken translator entities (e.g. if
 * the translator plugin of the translator entity doesn't exist (anymore).
 *
 * @param $name
 *   The machine-readable name of the translator entity that we are trying to
 *   save.
 *
 * @return boolean
 *   TRUE if a translator entity with the same machine-readable name already
 *   exists FALSE otherwise.
 */
function tmgmt_translator_exists($name) {
  $query = new EntityFieldQuery();
  $query = $query->entityCondition('entity_type', 'tmgmt_translator')
    ->propertyCondition('name', $name)
    ->count()
    ->range(0, 1);
  return (boolean) $query->execute();
}

/**
 * Loads a translator based on the name.
 *
 * @return TMGMTTranslator
 */
function tmgmt_translator_load($name) {
  $translators = entity_load_multiple_by_name('tmgmt_translator', array($name));
  return $translators ? reset($translators) : FALSE;
}

/**
 * Loads translation maps.
 */
function tmgmt_translator_load_multiple($names = array(), $conditions = array()) {
  return entity_load_multiple_by_name('tmgmt_translator', $names, $conditions);
}

/**
 * Checks whether a translator with a certain name is busy and therefore can't
 * be modified or deleted. A translator is considered 'busy' if there are jobs
 * attached to it that are in an active state.
 *
 * @param $translator
 *   The machine-readable name of a translator.
 *
 * @return boolean
 *   TRUE if the translator is busy, FALSE otherwise.
 */
function tmgmt_translator_busy($translator) {
  $query = new EntityFieldQuery();
  return (boolean) $query->entityCondition('entity_type', 'tmgmt_job')
    ->propertyCondition('state', array(TMGMT_JOB_STATE_SUBMITTED, TMGMT_JOB_STATE_REVIEW))
    ->propertyCondition('translator', $translator)
    ->range(0, 1)
    ->count()
    ->execute();
}

/**
 * Creates a translator.
 *
 * @param $plugin
 *   The plugin of the translator.
 * @param $name
 *   The machine-readable name of the translator.
 * @param $label
 *   The label of the translator.
 * @param $description
 *   (Optional) The description of the translator. Defaults to an empty string.
 * @param $settings
 *   (Optional) An array of settings for the translator.
 * @param $values
 *   (Optional) Array of additional entity values.
 *
 * @return TMGMTTranslator
 *   The created, not yet saved, translator entity.
 */
function tmgmt_translator_create($plugin, $name, $label, $description = '', $settings = array(), $values = array()) {
  return entity_create('tmgmt_translator', array_merge($values, array(
    'translator_plugin' => $plugin,
    'name' => $name,
    'label' => $label,
    'description' => $description,
    'settings' => $settings,
  )));
}

/**
 * Auto creates a translator from a translator plugin definition.
 *
 * @param $plugin
 *   The machine-readable name of a translator plugin.
 */
function tmgmt_translator_auto_create($plugin) {
  if ($info = tmgmt_translator_plugin_info($plugin)) {
    if (!tmgmt_translator_exists($plugin)) {
      $label = $info['label'] . ' (auto created)';
      $translator = tmgmt_translator_create($plugin, $plugin, $label, $info['description']);
      // Append some default settings from the translator plugin definition.
      $translator->settings = $translator->getPluginController()->defaultPluginSettings();
      $translator->save();
    }
  }
  return FALSE;
}

/**
 * Determines all available service plugins.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 *
 * @return array
 *   An array of translator plugin definitions.
 */
function tmgmt_translator_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('translator', $plugin);
}

/**
 * Determines the controller class for a given service plugin.
 *
 * @param $plugin
 *   The machine-readable name of a service plugin.
 *
 * @return TMGMTTranslatorPluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_translator_plugin_controller($plugin) {
  return _tmgmt_plugin_controller('translator', $plugin);
}

/**
 * Returns an array of all available translator plugins with the labels as
 * values and the machine-readable name as the key.
 *
 * @return array
 *   An array of the labels of all available plugins.
 */
function tmgmt_translator_plugin_labels() {
  return _tmgmt_plugin_labels('translator');
}

/**
 * Returns a list of translator labels.
 */
function tmgmt_translator_labels() {
  $labels = array();
  foreach (tmgmt_translator_load_multiple(FALSE) as $translator) {
    $labels[$translator->identifier()] = $translator->label();
  }
  return $labels;
}

/**
 * @todo Lets see if we can make this work in a better way.
 *
 * @param $plugin
 * @param $source_language
 * @param array $languages
 *   (Optional)
 * @return array
 */
function tmgmt_translator_filtered_by_language($source_language, $selected_target_language) {
  $translators = array();
  foreach (tmgmt_translator_load_multiple(FALSE) as $translator) {
    switch (tmgmt_translator_check($translator, $source_language, $selected_target_language)) {
      case TMTGT_TRANSLATOR_NOT_AVAILABLE:
        $translators[$translator->identifier()] = t('@label (not available)', array('@label' => $translator->label()));
        break;
      case TMGMT_TRANSLATOR_NOT_AVAILABLE_FOR_LANGUAGE:
        $translators[$translator->identifier()] = t('@label (not available for this language)', array('@label' => $translator->label()));
        break;
      default:
        $translators[$translator->identifier()] = $translator->label();
    }
  }
  return $translators;
}

/**
 * @todo Lets see if we can make this work in a better way.
 *
 * @param TMGMTTranslator $translator
 * @param $source_language
 * @param $selected_target_language
 * @return int
 */
function tmgmt_translator_check(TMGMTTranslator $translator, $source_language, $selected_target_language) {
  if (!$translator->isAvailable()) {
    return TMTGT_TRANSLATOR_NOT_AVAILABLE;
  }
  elseif (array_key_exists($selected_target_language, $translator->getSupportedTargetLanguages($source_language))) {
    return TMGMT_TRANSLATOR_AVAILABLE;
  }
  else {
    return TMGMT_TRANSLATOR_NOT_AVAILABLE_FOR_LANGUAGE;
  }
}
/**
 * @} End of "addtogroup tmgmt_translator".
 */
/**
 * @addtogroup tmgmt_source
 * @{
 */

/**
 * Determines all available source object plugins.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return array
 *   An array of source plugin definitions.
 */
function tmgmt_source_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('source', $plugin);
}

/**
 * Get the controller class for a given source plugin.
 *
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return TMGMTSourcePluginControllerInterface
 *   The controller object for the given source plugin.
 */
function tmgmt_source_plugin_controller($plugin) {
  return _tmgmt_plugin_controller('source', $plugin);
}

/**
 * Returns an array of all available source plugins with the labels as
 * values and the machine-readable name as the key.
 *
 * @return array
 *   An array of the labels of all available plugins.
 */
function tmgmt_source_plugin_labels() {
  return _tmgmt_plugin_labels('source');
}
/**
 * @} End of "addtogroup tmgmt_source".
 */

/**
 * Discovers all available source and/or translator plugins.
 * @param $type
 *   The type of the plugin. Can be 'translator' or 'source'.
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return array
 *   An array of source and/or translator plugins.
 */
function _tmgmt_plugin_info($type, $plugin) {
  $info = &drupal_static(__FUNCTION__);
  if (!isset($info[$type])) {
    $info[$type] = array();
    foreach (module_implements('tmgmt_' . $type . '_plugin_info') as $module) {
      foreach (module_invoke($module, 'tmgmt_' . $type . '_plugin_info') as $key => $item) {
        $info[$type][$key] = $item;
        $info[$type][$key]['module'] = $module;
        $info[$type][$key]['plugin'] = $key;
      }
    }
    drupal_alter('tmgmt_' . $type . '_plugin_info', $info[$type]);
  }
  if (isset($plugin) && isset($info[$type][$plugin])) {
    return $info[$type][$plugin];
  }
  elseif (!isset($plugin)) {
    return $info[$type];
  }
}

/**
 * Determines the controller class for a given plugin type.
 *
 * @param $type
 *   The type of the plugin. Can be 'translator' or 'source'.
 * @param $plugin
 *   The machine-readable name of a source plugin.
 *
 * @return
 *   The controller object for the given source plugin.
 */
function _tmgmt_plugin_controller($type, $plugin) {
  $cache = &drupal_static(__FUNCTION__);
  if (!isset($cache[$type][$plugin])) {
    $info = _tmgmt_plugin_info($type, $plugin);
    if ($info && !empty($info['controller class'])) {
      $cache[$type][$plugin] = new $info['controller class']($plugin);
    }
    else {
      $cache[$type][$plugin] = FALSE;
    }
  }
  return $cache[$type][$plugin];
}

/**
 * Returns an array of labels of all available plugins of a given type with the
 * machine-readable name as the key.
 *
 * @return array
 *   An array of the labels of all available plugins.
 */
function _tmgmt_plugin_labels($type) {
  $list = array();
  $plugin_info = 'tmgmt_' . $type . '_plugin_info';
  foreach ($plugin_info() as $key => $info) {
    $list[$key] = $info['label'];
  }
  return $list;
}

/**
 * Converts a nested data array into a flattened structure with a combined key.
 *
 * This function can be used by translators to help with the data conversion.
 *
 * Nested keys will be joined together using a colon, so for example
 * $data['key1']['key2']['key3'] will be converted into
 * $flattened_data['key1][key2][key3'].
 *
 * @param $data
 *   The nested array structure that should be flattened.
 * @param $prefix
 *   Internal use only, indicates the current key prefix when recursing into
 *   the data array.
 *
 * @return
 *   The flattened data array.
 *
 * @see tmgmt_unflatten_data()
 */
function tmgmt_flatten_data($data, $prefix = NULL) {
  $flattened_data = array();
  // Each element is either a text (has #text property defined) or has children,
  // not both.
  if (!empty($data['#text'])) {
    $flattened_data[$prefix] = $data;
  }
  else {
    $prefix = !empty($prefix) ? $prefix . TMGMT_ARRAY_DELIMITER : '';
    foreach (element_children($data) as $key) {
      $flattened_data += tmgmt_flatten_data($data[$key], $prefix . $key);
    }
  }
  return $flattened_data;
}

/**
 * Converts a flattened data structure into a nested array.
 *
 * This function can be used by translators to help with the data conversion.
 *
 * Nested keys will be created based on the colon, so for example
 * $flattened_data['key1][key2][key3'] will be converted into
 * $data['key1']['key2']['key3'].
 *
 * @param $data
 *   The flattened data array.
 *
 * @return
 *   The nested data array.
 *
 * @see tmgmt_flatten_data()
 */
function tmgmt_unflatten_data($flattened_data) {
  $data = array();
  foreach ($flattened_data as $key => $flattened_data_entry) {
    drupal_array_set_nested_value($data, explode(TMGMT_ARRAY_DELIMITER, $key), $flattened_data_entry);
  }
  return $data;
}

/**
 * Helper function for recursively marking form elements as #disabled if the
 * parent form element is marked as such.
 *
 * @param $form
 *   A renderable Form API array structure.
 *
 * @return array
 *   The processed array.
 */
function _tmgmt_form_inherit_disabled($form) {
  foreach (element_children($form) as $key) {
    if (!empty($form['#disabled'])) {
      $form[$key]['#disabled'] = TRUE;
    }
    if (is_array($form[$key])) {
      $form[$key] = _tmgmt_form_inherit_disabled($form[$key]);
    }
  }
  return $form;
}
