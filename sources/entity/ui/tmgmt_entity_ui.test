<?php

/**
 * Helper TestCase class that contains methods to create a node type and a node.
 */
abstract class TMGMTEntitySourceBaseTestCase extends TMGMTBaseTestCase {

  public $field_names = array();

  /**
   * Creates node type with several text fields with different cardinality.
   *
   * @param string $machine_name
   *   Machine name of the node type.
   * @param string $human_name
   *   Human readable name of the node type.
   * @param int $language_content_type
   *   Flag of how the translation should be handled.
   */
  function createNodeType($machine_name, $human_name, $language_content_type = ENTITY_TRANSLATION_ENABLED) {

    // Create new bundle.
    $type = array(
      'type' => $machine_name,
      'name' => $human_name,
      'base' => 'node_content',
      'description' => '',
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
    node_types_rebuild();

    // Set content type to be translatable as specified by
    // $language_content_type.
    $edit = array();
    $edit['language_content_type'] = $language_content_type;
    $this->drupalPost('admin/structure/types/manage/' . $machine_name, $edit, t('Save content type'));

    // Create several text fields.
    $field_types = array('text', 'text_with_summary');
    $this->field_names[$machine_name][] = 'body';

    for ($i = 0 ; $i <= 5; $i++) {
      $field_type = $field_types[array_rand($field_types, 1)];
      $field_name = drupal_strtolower($this->randomName());

      // Create a field.
      $field = array(
        'field_name' => $field_name,
        'type' => $field_type,
        'cardinality' => mt_rand(1, 5),
        // Field can be translatable only if content type is
        // entity translatable.
        'translatable' => $language_content_type == ENTITY_TRANSLATION_ENABLED,
      );
      field_create_field($field);

      // Create an instance of the previously created field.
      $instance = array(
        'field_name' => $field_name,
        'entity_type' => 'node',
        'bundle' => $machine_name,
        'label' => $this->randomName(10),
        'description' => $this->randomString(30),
        'widget' => array(
          'type' => $field_type == 'text' ? 'text_textfield' : 'text_textarea_with_summary',
          'label' => $this->randomString(10),
        ),
      );
      field_create_instance($instance);

      // Store field names in case there are needed outside this method.
      $this->field_names[$machine_name][] = $field_name;
    }
  }

  /**
   * Creates a node of a given bundle.
   *
   * It uses field_names initialized in createNodeType() and will populate
   * their content with random strings.
   *
   * @param string $bundle
   *   Node type name.
   * @param string $sourcelang
   *   Source lang of the node to be created.
   *
   * @return object
   *   Newly created node object.
   */
  function createNode($bundle, $sourcelang = 'en') {
    $node = array(
      'type' => $bundle,
      'language' => $sourcelang,
    );

    foreach ($this->field_names[$bundle] as $field_name) {
      $field_info = field_info_field($field_name);
      $cardinality = $field_info['cardinality'] == FIELD_CARDINALITY_UNLIMITED ? 1 : $field_info['cardinality'];

      // Create two deltas for each field.
      for ($delta = 0; $delta <= $cardinality; $delta++) {
        $node[$field_name][$sourcelang][$delta]['value'] = $this->randomName(20);
        if ($field_info['type'] == 'text_with_summary') {
          $node[$field_name][$sourcelang][$delta]['summary'] = $this->randomName(10);
        }
      }
    }

    return $this->drupalCreateNode($node);
  }
}

class TMGMTEntitySourceListTestCase extends TMGMTEntitySourceBaseTestCase {

  protected $nodes = array();

  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Entity Source List tests'),
      'description' => t('Tests the user interface for entity translation lists.'),
      'group' => t('Translation Management'),
    );
  }

  function setUp() {
    parent::setUp(array('entity_translation', 'tmgmt_entity', 'tmgmt_entity_ui', 'translation', 'comment'));
    $admin_user = $this->drupalCreateUser(array('administer languages', 'access administration pages', 'administer content types', 'administer entity translation', 'administer tmgmt'));
    $this->drupalLogin($admin_user);
    $this->setEnvironment('de');
    $this->setEnvironment('fr');

    // Enable entity translations for nodes and comments.
    $edit = array();
    $edit['entity_translation_entity_types[comment]'] = 1;
    $edit['entity_translation_entity_types[node]'] = 1;
    $this->drupalPost('admin/config/regional/entity_translation', $edit, t('Save configuration'));

    $this->createNodeType('article', 'Article', ENTITY_TRANSLATION_ENABLED);
    $this->createNodeType('page', 'Page', TRANSLATION_ENABLED);

    // Create nodes that will be used during tests.
    // NOTE that the order matters as results are read by xpath based on
    // position in the list.
    $this->nodes['page']['en'][] = $this->createNode('page');
    $this->nodes['article']['de'][0] = $this->createNode('article', 'de');
    $this->nodes['article']['fr'][0] = $this->createNode('article', 'fr');
    $this->nodes['article']['en'][3] = $this->createNode('article', 'en');
    $this->nodes['article']['en'][2] = $this->createNode('article', 'en');
    $this->nodes['article']['en'][1] = $this->createNode('article', 'en');
    $this->nodes['article']['en'][0] = $this->createNode('article', 'en');
  }

  function testAvailabilityOfEntityLists() {

    $this->drupalGet('admin/config/regional/tmgmt/entity/comment');
    // Check if we are at comments page.
    $this->assertText(t('Entity overview (Comment)'));
    // No comments yet - empty message is expected.
    $this->assertText(t('No entities matching given criteria have been found.'));

    $this->drupalGet('admin/config/regional/tmgmt/entity/node');
    // Check if we are at nodes page.
    $this->assertText(t('Entity overview (Node)'));
    // We expect article title as article node type is entity translatable.
    $this->assertText($this->nodes['article']['en'][0]->title);
    // Page node type should not be listed as it is not entity translatable.
    $this->assertNoText($this->nodes['page']['en'][0]->title);
  }

  function testTranslationStatuses() {

    // Test statuses: Source, Missing.
    $this->drupalGet('admin/config/regional/tmgmt/entity/node');
    $langstatus_en = array_shift($this->xpath('//table[@id="tmgmt-entities-list"]/tbody/tr[1]/td[@class="langstatus-en"]'));
    $langstatus_de = array_shift($this->xpath('//table[@id="tmgmt-entities-list"]/tbody/tr[1]/td[@class="langstatus-de"]'));

    $this->assertEqual($langstatus_en->img['title'], t('Source'));
    $this->assertEqual($langstatus_de->img['title'], t('Missing'));

    // Test status: Active job item.
    $job = $this->createJob('en', 'de');
    $job->translator = $this->default_translator->name;
    $job->settings = array();
    $job->save();

    $job->addItem('entity', 'node', $this->nodes['article']['en'][0]->nid);
    $job->requestTranslation();

    $this->drupalGet('admin/config/regional/tmgmt/entity/node');
    $langstatus_de = array_shift($this->xpath('//table[@id="tmgmt-entities-list"]/tbody/tr[1]/td[@class="langstatus-de"]/a'));

    $wrapper = entity_metadata_wrapper('tmgmt_job_item', array_shift($job->getItems()));
    $label = t('Active job item: @state', array('@state' => $wrapper->state->label()));

    $this->assertEqual($langstatus_de->img['title'], $label);

    // Test status: Current
    foreach ($job->getItems() as $job_item) {
      $job_item->acceptTranslation();
    }

    $this->drupalGet('admin/config/regional/tmgmt/entity/node');
    $langstatus_de = array_shift($this->xpath('//table[@id="tmgmt-entities-list"]/tbody/tr[1]/td[@class="langstatus-de"]'));

    $this->assertEqual($langstatus_de->img['title'], t('Current'));
  }

  function testTranslationSubmissions() {

    // Simple submission.
    $nid = $this->nodes['article']['en'][0]->nid;
    $edit = array();
    $edit["items[$nid]"] = 1;
    $this->drupalPost('admin/config/regional/tmgmt/entity/node', $edit, t('Request translation'));
    $this->assertText(t('One job needs to be checked out.'));

    // Submission of two entities of the same source language.
    $nid1 = $this->nodes['article']['en'][0]->nid;
    $nid2 = $this->nodes['article']['en'][1]->nid;
    $edit = array();
    $edit["items[$nid1]"] = 1;
    $edit["items[$nid2]"] = 1;
    $this->drupalPost('admin/config/regional/tmgmt/entity/node', $edit, t('Request translation'));
    $this->assertText(t('One job needs to be checked out.'));

    // Submission of several entities of different source languages.
    $nid1 = $this->nodes['article']['en'][0]->nid;
    $nid2 = $this->nodes['article']['en'][1]->nid;
    $nid3 = $this->nodes['article']['en'][2]->nid;
    $nid4 = $this->nodes['article']['en'][3]->nid;
    $nid5 = $this->nodes['article']['de'][0]->nid;
    $nid6 = $this->nodes['article']['fr'][0]->nid;
    $edit = array();
    $edit["items[$nid1]"] = 1;
    $edit["items[$nid2]"] = 1;
    $edit["items[$nid3]"] = 1;
    $edit["items[$nid4]"] = 1;
    $edit["items[$nid5]"] = 1;
    $edit["items[$nid6]"] = 1;
    $this->drupalPost('admin/config/regional/tmgmt/entity/node', $edit, t('Request translation'));
    $this->assertText(t('@count jobs need to be checked out.', array('@count' => '3')));
  }

  function testNodeEntityListings() {

    // Turn off the entity translation.
    $edit = array();
    $edit['language_content_type'] = TRANSLATION_ENABLED;
    $this->drupalPost('admin/structure/types/manage/article', $edit, t('Save content type'));

    // Check if we have appropriate message in case there are no entity
    // translatable content types.
    $this->drupalGet('admin/config/regional/tmgmt/entity/node');
    $this->assertText(t('Entity translation is not enabled for any of existing content types. To use this functionality go to Content types administration and enable entity translation for desired content types.'));

    // Turn on the entity translation for both - article and page - to test
    // search form.
    $edit = array();
    $edit['language_content_type'] = ENTITY_TRANSLATION_ENABLED;
    $this->drupalPost('admin/structure/types/manage/article', $edit, t('Save content type'));
    $this->drupalPost('admin/structure/types/manage/page', $edit, t('Save content type'));
    // Create page node after entity translation is enabled.
    $page_node_translatable = $this->createNode('page');

    $this->drupalGet('admin/config/regional/tmgmt/entity/node');
    // We have both listed - one of articles and page.
    $this->assertText($this->nodes['article']['en'][0]->title);
    $this->assertText($page_node_translatable->title);

    // Try the search by content type.
    $edit = array();
    $edit['search[type]'] = 'article';
    $this->drupalPost('admin/config/regional/tmgmt/entity/node', $edit, t('Search'));
    // There should be article present.
    $this->assertText($this->nodes['article']['en'][0]->title);
    // The page node should not be listed.
    $this->assertNoText($page_node_translatable->title);

    // Try cancel button - despite we do post content type search value
    // we should get nodes of botch content types.
    $this->drupalPost('admin/config/regional/tmgmt/entity/node', $edit, t('Cancel'));
    $this->assertText($this->nodes['article']['en'][0]->title);
    $this->assertText($page_node_translatable->title);
  }

  function testEntitySourceListSearch() {

    // We need a node with title composed of several words to test
    // "any words" search.
    $title_part_1 = $this->randomName('4');
    $title_part_2 = $this->randomName('4');
    $title_part_3 = $this->randomName('4');

    $this->nodes['article']['en'][0]->title = "$title_part_1 $title_part_2 $title_part_3";
    node_save($this->nodes['article']['en'][0]);

    // Submit partial node title and see if we have a result.
    $edit = array();
    $edit['search[title]'] = "$title_part_1 $title_part_3";
    $this->drupalPost('admin/config/regional/tmgmt/entity/node', $edit, t('Search'));
    $this->assertText("$title_part_1 $title_part_2 $title_part_3", t('Searching on partial node title must return the result.'));

    // Check if there is only one result in the list.
    $search_result_rows = $this->xpath('//table[@id="tmgmt-entities-list"]/tbody/tr');
    $this->assert(count($search_result_rows) == 1, t('The search result must return only one row.'));

    // To test if other entity types work go for simple comment search.
    $comment = new stdClass();
    $comment->comment_body[LANGUAGE_NONE][0]['value'] = $this->randomName();
    $comment->subject = $this->randomName();
    // We need to associate the comment with entity translatable node object.
    $comment->nid = $this->nodes['article']['en'][0]->nid;
    // Set defaults - without these we will get Undefined property notices.
    $comment->is_anonymous = TRUE;
    $comment->cid = 0;
    $comment->pid = 0;
    $comment->uid = 0;
    // Will add further comment variables.
    $comment = comment_submit($comment);
    comment_save($comment);
    // Do search for the comment.
    $edit = array();
    $edit['search[subject]'] = $comment->subject;
    $this->drupalPost('admin/config/regional/tmgmt/entity/comment', $edit, t('Search'));
    $this->assertText($comment->subject, t('Searching for a comment subject.'));
  }
}

/**
 * Basic Node Source tests.
 *
 */
class TMGMTEntitySourceUITestCase extends TMGMTBaseTestCase {

  // @todo: Switch to testing profile.
  protected $profile = 'standard';


  /**
   * Implements getInfo().
   */
  static function getInfo() {
    return array(
      'name' => t('Entity Source UI tests'),
      'description' => t('Tests the user interface for entity translation sources.'),
      'group' => t('Translation Management'),
      'dependencies' => array('entity_translation'),
    );
  }

  /**
   * Overrides SimplenewsTestCase::setUp()
   */
  function setUp() {
    parent::setUp(array('tmgmt_entity', 'tmgmt_entity_ui', 'block', 'entity_translation'));
    variable_set('language_content_type_page', ENTITY_TRANSLATION_ENABLED);
    variable_set('language_content_type_article', ENTITY_TRANSLATION_ENABLED);


    // Create a new admin user with the administer blocks permission.
    $this->admin_user = $this->drupalCreateUser(array('administer languages', 'access administration pages', 'administer content types', 'create translation jobs', 'submit translation jobs', 'accept translation jobs', 'administer blocks', 'administer entity translation', 'toggle field translatability'));
    $this->drupalLogin($this->admin_user);
    $this->setEnvironment('de');
    $this->setEnvironment('fr');
    $this->setEnvironment('es');
    $this->setEnvironment('el');

    // Allow auto-accept.
    $default_translator = tmgmt_translator_load('test_translator');
    $default_translator->settings = array(
      'auto_accept' => TRUE,
    );
    $default_translator->save();

    // Change body field to be translatable.
    $body = field_info_field('body');
    $body['translatable'] = TRUE;
    field_update_field($body);

    // Enable path locale detection.
    $edit = array(
      'language[enabled][locale-url]' => TRUE,
      'language_content[enabled][locale-interface]' => TRUE,
    );
    $this->drupalPost('admin/config/regional/language/configure', $edit, t('Save settings'));

    /*
    // @todo Re-enable this when switching to testing profile.
    // Enable the main page content block for hook_page_alter() to work.
    $edit = array(
      'blocks[system_main][region]' => 'content',
    );
    $this->drupalPost('admin/structure/block', $edit, t('Save blocks'));

    // Copied from standard.install
    $type = array(
      'type' => 'page',
      'name' => st('Basic page'),
      'base' => 'node_content',
      'description' => st("Use <em>basic pages</em> for your static content, such as an 'About us' page."),
      'custom' => 1,
      'modified' => 1,
      'locked' => 0,
    );
    $type = node_type_set_defaults($type);
    node_type_save($type);
    node_add_body_field($type);
    node_types_rebuild();
    debug(_node_types_build());*/
  }

  /**
   * Test the translate tab for a single checkout.
   */
  function testNodeTranslateTabSingleCheckout() {

    // Create a user that is allowed to translate nodes.
    $translater = $this->drupalCreateUser(array('translate node entities', 'create translation jobs', 'submit translation jobs', 'accept translation jobs',));
    $this->drupalLogin($translater);

    // Create an english source node.
    $node = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Go to the translate tab.
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink('Translate');

    // Assert some basic strings on that page.
    $this->assertText(t('Translations of @title', array('@title' => $node->title)));
    $this->assertText(t('Pending Translations'));

    // Request a translation for german.
    $edit = array(
      'languages[de]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translation'));

    // Verify that we are on the translate tab.
    $this->assertText(t('One job needs to be checked out.'));
    $this->assertText(t('Translation for @title', array('@title' => $node->title)));

    // Submit.
    $this->drupalPost(NULL, array(), t('Submit to translator'));

    // Make sure that we're back on the translate tab.
    $this->assertEqual(url('node/' . $node->nid . '/translate', array('absolute' => TRUE)), $this->getUrl());
    $this->assertText(t('Test translation created.'));
    $this->assertNoText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node->title, '@language' => t('German'))));
    $this->assertText(t('The translation for @title has been accepted.', array('@title' => $node->title)));

    // German node should now be listed and be clickable.
    // @todo Improve detection of the link, e.g. use xpath on the table or the
    // title module to get a better title.
    $this->clickLink('view', 1);
    $this->assertText('de_' . $node->body['en'][0]['value']);
  }

  /**
   * Test the translate tab for a single checkout.
   */
  function testNodeTranslateTabMultipeCheckout() {
    // Create a user that is allowed to translate nodes.
    $translater = $this->drupalCreateUser(array('translate node entities', 'create translation jobs', 'submit translation jobs', 'accept translation jobs'));
    $this->drupalLogin($translater);

    // Create an english source node.
    $node = $this->drupalCreateNode(array('type' => 'page', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Go to the translate tab.
    $this->drupalGet('node/' . $node->nid);
    $this->clickLink('Translate');

    // Assert some basic strings on that page.
    $this->assertText(t('Translations of @title', array('@title' => $node->title)));
    $this->assertText(t('Pending Translations'));

    // Request a translation for german.
    $edit = array(
      'languages[de]' => TRUE,
      'languages[es]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translation'));

    // Verify that we are on the translate tab.
    $this->assertText(t('2 jobs need to be checked out.'));

    // Submit all jobs.
    $this->assertText(t('Translation for @title', array('@title' => $node->title)));
    $this->drupalPost(NULL, array(), t('Submit to translator and continue'));
    $this->assertText(t('Translation for @title', array('@title' => $node->title)));
    $this->drupalPost(NULL, array(), t('Submit to translator'));

    // Make sure that we're back on the translate tab.
    $this->assertEqual(url('node/' . $node->nid . '/translate', array('absolute' => TRUE)), $this->getUrl());
    $this->assertText(t('Test translation created.'));
    $this->assertNoText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $node->title, '@language' => t('Spanish'))));
    $this->assertText(t('The translation for @title has been accepted.', array('@title' => $node->title)));

    // Translated nodes should now be listed and be clickable.
    // @todo Use links on translate tab.
    $this->drupalGet('de/node/' . $node->nid);
    $this->assertText('de_' . $node->body['en'][0]['value']);

    $this->drupalGet('es/node/' . $node->nid);
    $this->assertText('es_' . $node->body['en'][0]['value']);
  }

  /**
   * Test translating comments.
   */
  function testCommentTranslateTab() {
    // Enable comment translation.
    $edit = array(
      'entity_translation_entity_types[comment]' => TRUE
    );
    $this->drupalPost('admin/config/regional/entity_translation', $edit, t('Save configuration'));

    // Change comment_body field to be translatable.
    $comment_body = field_info_field('comment_body');
    $comment_body['translatable'] = TRUE;
    field_update_field($comment_body);

    // Create a user that is allowed to translate comments.
    $permissions = array('translate comment entities', 'create translation jobs', 'submit translation jobs', 'accept translation jobs', 'post comments', 'skip comment approval', 'edit own comments');
    $entity_translation_permissions = entity_translation_permission();
    // The new translation edit form of entity_translation requires a new
    // permission that does not yet exist in older versions. Add it
    // conditionally.
    if (isset($entity_translation_permissions['edit original values'])) {
      $permissions[] = 'edit original values';
    }
    $translater = $this->drupalCreateUser($permissions);
    $this->drupalLogin($translater);

    // Create an english source term.
    $node = $this->drupalCreateNode(array('type' => 'article', 'language' => 'en', 'body' => array('en' => array(array()))));

    // Add a comment.
    $this->drupalGet('node/' . $node->nid);
    $edit = array(
      'subject' => $this->randomName(),
      'comment_body[en][0][value]' => $this->randomName(),
    );
    $this->drupalPost(NULL, $edit, t('Save'));
    $this->assertText(t('Your comment has been posted.'));

    // Go to the translate tab.
    $this->clickLink('edit');
    $this->assertTrue(preg_match('|comment/(\d+)/edit$|', $this->getUrl(), $matches), 'Comment found');
    $comment = comment_load($matches[1]);
    $this->clickLink('Translate');

    // Assert some basic strings on that page.
    $this->assertText(t('Translations of @title', array('@title' => $comment->subject)));
    $this->assertText(t('Pending Translations'));

    // Request a translation for german.
    $edit = array(
      'languages[de]' => TRUE,
      'languages[es]' => TRUE,
    );
    $this->drupalPost(NULL, $edit, t('Request translation'));

    // Verify that we are on the translate tab.
    $this->assertText(t('2 jobs need to be checked out.'));

    // Submit all jobs.
    $this->assertText(t('Translation for @title', array('@title' => $comment->subject)));
    $this->drupalPost(NULL, array(), t('Submit to translator and continue'));
    $this->assertText(t('Translation for @title', array('@title' => $comment->subject)));
    $this->drupalPost(NULL, array(), t('Submit to translator'));

    // Make sure that we're back on the translate tab.
    $this->assertEqual(url('comment/' . $comment->cid . '/translate', array('absolute' => TRUE)), $this->getUrl());
    $this->assertText(t('Test translation created.'));
    $this->assertNoText(t('The translation of @title to @language is finished and can now be reviewed.', array('@title' => $comment->subject, '@language' => t('Spanish'))));
    $this->assertText(t('The translation for @title has been accepted.', array('@title' => $comment->subject)));

    // @todo Use links on translate tab.
    $this->drupalGet('de/comment/' . $comment->cid);
    $this->assertText('de_' . $comment->comment_body['en'][0]['value']);

    // @todo Use links on translate tab.
    $this->drupalGet('es/node/' . $comment->cid);
    $this->assertText('es_' . $comment->comment_body['en'][0]['value']);
  }
}
