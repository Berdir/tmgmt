<?php

/**
 * @file
 * Installation hooks for tmgmt_local module.
 */

/**
 * Implements hook_schema().
 */
function tmgmt_local_schema() {
  $schema['tmgmt_local_task'] = array(
    'description' => 'A tmgmt local task connects translator user with assigned job items and provide additional workflow data.',
    'fields' => array(
      'tltid' => array(
        'description' => 'The identifier of the task.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'uid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "User's {users}.uid for task creator.",
      ),
      'created' => array(
        'description' => 'The Unix timestamp when the task was created.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'changed' => array(
        'description' => 'The Unix timestamp when the task was most recently saved.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => 'Task title.',
        'type' => 'varchar',
        'length' => 128,
      ),
      'tuid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => 'Assigned translator user {users}.uid.',
      ),
      'tjid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
        'description' => "Translation job {tmgmt_job}.tjid that belongs to task.",
      ),
      'status' => array(
        'description' => 'The status of the task.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'loop_count' => array(
        'description' => 'Counter for how many times this task was returned to translator.',
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('tltid'),
    'indexes' => array(
      'tuid' => array('tuid'),
    ),
    'foreign keys' => array(
      'author' => array(
        'table' => 'users',
        'columns' => array('uid' => 'uid'),
      ),
      'translator' => array(
        'table' => 'users',
        'columns' => array('tuid' => 'uid'),
      ),
      'job' => array(
        'table' => 'tmgmt_job',
        'columns' => array('tjid' => 'tjid'),
      ),
    ),
  );

  $schema['tmgmt_local_task_item'] = array(
    'description' => 'A tmgmt local task item contains additional workflow data for a job item.',
    'fields' => array(
      'tltiid' => array(
        'description' => 'The identifier of the task item.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'tltid' => array(
        'description' => 'Translation job task {tmgmt_local_task}.tltid that belongs to task.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'tjiid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "Translation job item {tmgmt_job_item}.tjiid that belongs to task.",
      ),
      'status' => array(
        'description' => 'The status of the task.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'Stores translations and translation statuses',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('tltiid'),
    'indexes' => array(
      'tltid' => array('tltid'),
    ),
    'foreign keys' => array(
      'task' => array(
        'table' => 'tmgmt_local_task',
        'columns' => array('tltid' => 'tltid'),
      ),
      'job_item' => array(
        'table' => 'tmgmt_job_item',
        'columns' => array('tjiid' => 'tjiid'),
      ),
    ),
  );

  return $schema;
}

/**
 * Adds the {tmgmt_local_task_item} table.
 */
function tmgmt_local_update_7000() {
  $schema = array(
    'description' => 'A tmgmt local task item contains additional workflow data for a job item.',
    'fields' => array(
      'tltiid' => array(
        'description' => 'The identifier of the task item.',
        'type' => 'serial',
        'not null' => TRUE,
      ),
      'tltid' => array(
        'description' => 'Translation job task {tmgmt_local_task}.tltid that belongs to task.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'tjiid' => array(
        'type' => 'int',
        'not null' => TRUE,
        'description' => "Translation job item {tmgmt_job_item}.tjiid that belongs to task.",
      ),
      'status' => array(
        'description' => 'The status of the task.',
        'type' => 'int',
        'not null' => TRUE,
      ),
      'data' => array(
        'description' => 'Stores translations and translation statuses',
        'type' => 'text',
        'not null' => TRUE,
        'size' => 'big',
        'serialize' => TRUE,
      ),
    ),
    'primary key' => array('tltiid'),
    'indexes' => array(
      'tltid' => array('tltid'),
    ),
    'foreign keys' => array(
      'task' => array(
        'table' => 'tmgmt_local_task',
        'columns' => array('tltid' => 'tltid'),
      ),
      'job_item' => array(
        'table' => 'tmgmt_job_item',
        'columns' => array('tjiid' => 'tjiid'),
      ),
    ),
  );
  db_create_table('tmgmt_local_task_item', $schema);
}

/**
 * Create local task items.
 */
function tmgmt_local_update_7001() {
  $result = db_query('SELECT lt.tltid, ji.tjiid, ji.state from {tmgmt_local_task} lt INNER JOIN {tmgmt_job} j ON j.tjid = lt.tjid INNER JOIN {tmgmt_job_item} ji ON ji.tjid = j.tjid');
  $insert = db_insert('tmgmt_local_task_item')
    ->fields(array('tltid', 'tjiid', 'status', 'data'));
  foreach ($result as $row) {
    switch ($row->state) {
      case 2:
        // Job item state needs review is task item status translated.
        $status = 1;
        break;
      case 3:
        // Job item state accepted is task item status completed.
        $status = 3;
        break;
      case 1:
      default:
        // Job item state active is task item status untranslated.
        $status = 0;
        break;
    }
    $insert->values(array(
      'tltid' => $row->tltid,
      'tjiid' => $row->tjiid,
      'status' => $status,
      'data' => serialize(array()),
    ));
  }
  $insert->execute();
}
