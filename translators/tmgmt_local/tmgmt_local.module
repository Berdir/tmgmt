<?php

/**
 * @file
 * Main module file for the local translation module.
 */

/**
 * @defgroup tmgmt_local_task TMGMT Local Task
 * @{
 * Various local task API functions.
 */

/**
 * Modules should return this value from hook_tmgmt_local_translation_access()
 * to allow access to a node.
 */
define('TMGMT_LOCAL_TRANSLATION_ACCESS_ALLOW', 'allow');

/**
 * Modules should return this value from hook_tmgmt_local_translation_access()
 * to deny access to a node.
 */
define('TMGMT_LOCAL_TRANSLATION_ACCESS_DENY', 'deny');

/**
 * Modules should return this value from hook_tmgmt_local_translation_access()
 * to not affect node access.
 */
define('TMGMT_LOCAL_TRANSLATION_ACCESS_IGNORE', NULL);

/**
 * Translation task is not assigned to translator.
 */
define('TMGMT_LOCAL_TASK_STATUS_UNASSIGNED', 0);

/**
 * Translation task is pending.
 */
define('TMGMT_LOCAL_TASK_STATUS_PENDING', 1);

/**
 * Translation task is completed (all job items are translated).
 */
define('TMGMT_LOCAL_TASK_STATUS_COMPLETED', 2);

/**
 * Translation task is rejected (at least some job items are rejected).
 */
define('TMGMT_LOCAL_TASK_STATUS_REJECTED', 3);

/**
 * Translation task is closed.
 */
define('TMGMT_LOCAL_TASK_STATUS_CLOSED', 4);

/**
 * Translation task item is untranslated.
 */
define('TMGMT_LOCAL_TASK_ITEM_STATUS_PENDING', 0);

/**
 * Translation task item is translated and pending review of the job item.
 */
define('TMGMT_LOCAL_TASK_ITEM_STATUS_COMPLETED', 1);

/**
 * Translation job item has been rejected and the task needs to be updated.
 */
define('TMGMT_LOCAL_TASK_ITEM_STATUS_REJECTED', 2);

/**
 * The translation task item has been completed and closed.
 */
define('TMGMT_LOCAL_TASK_ITEM_STATUS_CLOSED', 3);

/**
 * Untranslated translation data item.
 */
define('TMGMT_DATA_ITEM_STATE_UNTRANSLATED', 0);

/**
 * @} End of "tmgmt_local_task".
 */

/**
 * Implements hook_entity_info().
 */
function tmgmt_local_entity_info() {
  $info = array(
    'tmgmt_local_task' => array(
      'label' => t('Translation Task'),
      'module' => 'tmgmt_local',
      'entity class' => 'TMGMTLocalTask',
      'controller class' => 'TMGMTLocalTaskController',
      'metadata controller class' => 'TMGMTLocalTaskMetadataController',
      'views controller class' => 'TMGMTLocalTaskViewsController',
      'base table' => 'tmgmt_local_task',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'access callback' => 'tmgmt_local_task_access',
      'entity keys' => array(
        'id' => 'tltid',
      ),
      'admin ui' => array(
        'controller class' => 'TMGMTLocalTaskUIController',
        'path' => 'translate',
      ),
    ),
    'tmgmt_local_task_item' => array(
      'label' => t('Translation Task Item'),
      'module' => 'tmgmt_local',
      'entity class' => 'TMGMTLocalTaskItem',
      'controller class' => 'TMGMTLocalTaskItemController',
      'metadata controller class' => 'TMGMTLocalTaskItemMetadataController',
      'views controller class' => 'TMGMTLocalTaskItemViewsController',
      'base table' => 'tmgmt_local_task_item',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'access callback' => 'tmgmt_local_task_item_access',
      'entity keys' => array(
        'id' => 'tltiid',
      ),
      'admin ui' => array(
        'controller class' => 'TMGMTLocalTaskItemUIController',
        'path' => 'translate',
      ),
    ),
  );
  return $info;
}

/**
 * Implements hook_theme().
 */
function tmgmt_local_theme() {
  return array(
    'tmgmt_local_translation_form' => array(
      'render element' => 'element',
      'file' => 'includes/tmgmt_local.theme.inc',
    ),
    'tmgmt_local_translation_form_element' => array(
      'render element' => 'element',
      'file' => 'includes/tmgmt_local.theme.inc',
    ),
    // @todo - not implemented.
    'tmgmt_local_translation_form_element_status' => array(
      'render element' => 'status',
      'file' => 'includes/tmgmt_local.theme.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_local_menu() {
  $items['translate/%tmgmt_local_task/assign-to-me'] = array(
    'title' => 'Assign translation task to me',
    'description' => 'Assign translation task to current translator user.',
    'page callback' => 'tmgmt_local_translation_assign_to_me',
    'page arguments' => array(1),
    'access callback' => 'tmgmt_local_translation_access',
    'access arguments' => array(1),
    'file' => 'includes/tmgmt_local.pages.inc',
  );
  $items['manage-translate/assign-tasks'] = array(
    'title' => 'Assign translation task',
    'description' => 'Assign translation tasks to specific translator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_local_translation_assign_form', 2),
    'access arguments' => array('administer translation tasks'),
    'file' => 'includes/tmgmt_local.pages.inc',
    'type' => MENU_CALLBACK,
  );
  $items['manage-translate/reassign-tasks'] = array(
    'title' => 'Reassign translation task',
    'description' => 'Ressign translation tasks to specific translator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_local_translation_reassign_form', 2),
    'access arguments' => array('administer translation tasks'),
    'file' => 'includes/tmgmt_local.pages.inc',
    'type' => MENU_CALLBACK,
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tmgmt_local_permission() {
  return array(
    'provide translation services' => array(
      'title' => t('Provide translation services'),
      'descriptions' => t('Root permission for translation access: Users with this permission are eligible to be granted translation access to a translation task.'),
    ),
    'administer translation tasks' => array(
      'title' => t('Administer translation tasks'),
      'description' => t('Administer translation tasks.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function tmgmt_local_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'tmgmt_local') . '/views',
  );
}

/**
 * Implements hook_default_views().
 */
function tmgmt_local_views_default_views() {
  return _tmgmt_load_exports('tmgmt_local', 'views', 'view.inc', 'view');
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_local_tmgmt_translator_plugin_info() {
  $info['local'] = array(
    'label' => t('Local Translator'),
    'description' => t('Allows local users to process translation jobs.'),
    'plugin controller class' => 'TMGMTLocalTranslatorPluginController',
    'ui controller class' => 'TMGMTLocalTranslatorUIController',
    'default settings' => array(
      'auto_accept' => TRUE,
    ),
    'map remote languages' => FALSE,
  );

  return $info;
}

/**
 * @addtogroup tmgmt_local
 * @{
 */

/**
 * Determine whether the current user is allowed to translate a given
 * translation task.
 *
 * @param $task
 *   The translation task to be translated.
 * @param $account
 *   (Optional) A user object representing the user that is trying to obtain
 *   translation access. Determines access for a user other than the current
 *   user.
 * @return bool
 *   TRUE if the user is allowed to translate the given translation job, FALSE
 *   otherwise.
 */
function tmgmt_local_translation_access(TMGMTLocalTask $task, $account = NULL) {
  $job = $task->getJob();

  if (!$job || !$job->isActive()) {
    return FALSE;
  }

  $rights = &drupal_static(__FUNCTION__);

  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  // If we've already checked access for this job and user, return from cache.
  if (isset($rights[$account->uid][$job->tjid])) {
    return $rights[$account->uid][$job->tjid];
  }

  // We grant access to the translation if both of the following conditions are
  // met:
  // - User is assigned as a translator to the given task.
  // - User has 'provide translation services' permission.
  // - No modules say to deny access.
  // - At least one module says to grant access.
  // - User has translation capabilities for this task.
  if (!user_access('provide translation services')) {
    $rights[$account->uid][$job->tjid] = FALSE;
    return FALSE;
  }

  if ($task->tuid == $account->uid) {
    $rights[$account->uid][$job->tjid] = TRUE;
    return TRUE;
  }

  $access = module_invoke_all('tmgmt_local_translation_access', $job, $account);
  if (in_array(TMGMT_LOCAL_TRANSLATION_ACCESS_DENY, $access, TRUE)) {
    $rights[$account->uid][$job->tjid] = FALSE;
    return FALSE;
  }
  elseif (in_array(TMGMT_LOCAL_TRANSLATION_ACCESS_ALLOW, $access, TRUE)) {
    $rights[$account->uid][$job->tjid] = TRUE;
    return TRUE;
  }

  // Lastly, check for the translation capabilities.
  $input = $job->source_language;
  $required = $job->target_language;
  $capabilities = tmgmt_local_translation_capabilities($input, $account);
  $rights[$account->uid][$job->tjid] = in_array($required, $capabilities);

  return $rights[$account->uid][$job->tjid];
}

/**
 * Determines the translation capabilities of a specific user or all users.
 *
 * @param $source_language
 *   (optional) The source language for which to check the translation
 *   capabilities for.
 * @param $account
 *   (optional) A user object representing the user for whom to check the
 *   translation capabilities for.
 *
 * @return array
 *   An array of supported target languages if a source language is given, an
 *   array of language pairs as array with the source and target keys otherwise.
 */
function tmgmt_local_translation_capabilities($source_language = NULL, $account = NULL) {
  $capabilities = &drupal_static(__FUNCTION__);

  $key = ($account ? $account->uid : 'all') . ':' . ($source_language ? $source_language : 'all');
  if (!isset($capabilities[$key])) {
    $capabilities[$key] = module_invoke_all('tmgmt_local_translation_capabilities', $source_language, $account);

    // If a source key is given, simplify array.
    // @todo: this is used to ensure backwards compatibility of this hook.
    //   Possibly rethink this hook completely, use a plugin?
    if ($source_language) {
      foreach ($capabilities[$key] as &$capability) {
        $capability = $capability['target'];
      }
    }
  }

  return $capabilities[$key];
}

/**
 * Helper function for clearing the languages cache of all local translators.
 *
 * Can be used in oder to clear the cache for supported target languages after
 * the translation capabilities of an local have changed.
 */
function tmgmt_local_clear_languages_cache() {
  $query = new EntityFieldQuery();
  $query->entityCondition('entity_type', 'tmgmt_translator');
  $query->propertyCondition('plugin', 'local');
  $result = $query->execute();
  if ($result) {
    foreach (tmgmt_translator_load_multiple(array_keys($result['tmgmt_translator'])) as $translator) {
      cache_clear_all('languages::' . $translator->name, 'cache_tmgmt');
    }
  }
}

/**
 * Loads a local translation task entity.
 *
 * @return TMGMTLocalTask
 */
function tmgmt_local_task_load($tltid) {
  return entity_load_single('tmgmt_local_task', $tltid);
}

/**
 * Loads local translation tasks entity.
 */
function tmgmt_local_task_load_multiple(array $tltids = array(), $conditions = array()) {
  return entity_load('tmgmt_local_task', $tltids, $conditions);
}

/**
 * Loads a local translation task items entity.
 *
 * @return TMGMTLocalTaskItem
 */
function tmgmt_local_task_item_load($tltiid) {
  return entity_load_single('tmgmt_local_task_item', $tltiid);
}

/**
 * Loads local translation task items entity.
 */
function tmgmt_local_task_item_load_multiple(array $tltiids = array(), $conditions = array()) {
  return entity_load('tmgmt_local_task_item', $tltiids, $conditions);
}

/**
 * Creates a translation task entity.
 *
 * @param $values
 *   (Optional) An array of additional entity values.
 *
 * @return TMGMTLocalTask
 *   The local translation task entity.
 */
function tmgmt_local_task_create(array $values = array()) {
  return entity_create('tmgmt_local_task', $values);
}

/**
 * Deletes multiple local tasks entities.
 *
 * @param $tltids
 *   An array of local tasks IDs.
 */
function tmgmt_local_task_delete_multiple(array $tltids) {
  entity_get_controller('tmgmt_local_task')->delete($tltids);
}

/**
 * Access callback for the local task entity.
 *
 * @param $op
 *   The operation being performed.
 * @param $item
 *   (Optional) A TMGMTLocalTask entity to check access for. If no entity is
 *   given, it will be determined whether access is allowed for all entities.
 * @param $account
 *   (Optional) The user to check for. Leave it to NULL to check for the global
 *   user.
 *
 * @return boolean
 *   TRUE if access is allowed, FALSE otherwise.
 */
function tmgmt_local_task_access($op, $task = NULL, $account = NULL) {
  if (user_access('administer tmgmt', $account) || user_access('administer translation tasks', $account)) {
    // Administrators can do everything.
    return TRUE;
  }

  if (!$account) {
    global $user;
    $account = $user;
  }

  // @todo - probably need refinement when we introduce more module permissions.
  switch ($op) {
    case 'view':
    case 'update':
      return user_access('provide translation services', $account);
      break;
    case 'unassign':
      return !empty($task->tuid) && $task->tuid == $account->uid && user_access('provide translation services', $account);
  }
}

/**
 * Access callback for the local task item entity.
 *
 * @param $op
 *   The operation being performed.
 * @param $item
 *   (Optional) A TMGMTLocalTaskItem entity to check access for. If no entity is
 *   given, it will be determined whether access is allowed for all entities.
 * @param $account
 *   (Optional) The user to check for. Leave it to NULL to check for the global
 *   user.
 *
 * @return boolean
 *   TRUE if access is allowed, FALSE otherwise.
 */
function tmgmt_local_task_item_access($op, TMGMTLocalTaskItem $item = NULL, $account = NULL) {
  $task = NULL;
  if ($item) {
    $task = $item->getTask();
  }
  return entity_access($op, 'tmgmt_local_task', $task, $account);
}

/**
 * Loads an array with the word and status statistics of a task.
 *
 * @param $tltids
 *   An array of local task ids.
 *
 * @return
 *   An array of objects with the keys word_count, count_pending,
 *   count_accepted, count_translated and loop_count.
 */
function tmgmt_local_task_statistics_load(array $tltids) {
  $statistics = &drupal_static(__FUNCTION__, array());

  // First try to get the values from the cache.
  $return = array();
  $tltids_to_load = array();
  foreach ($tltids as $tltid) {
    if (isset($statistics[$tltid])) {
      // Info exists in cache, get it from there.
      $return[$tltid] = $statistics[$tltid];
    }
    else {
      // Info doesn't exist in cache, add job to the list that needs to be
      // fetched.
      $tltids_to_load[] = $tltid;
    }
  }

  // If there are remaining jobs, build a query to fetch them.
  if (!empty($tltids_to_load)) {
    // Build the query to fetch the statistics.
    $query = db_select('tmgmt_local_task_item', 'tlti');
    $query->join('tmgmt_local_task', 'tlt', 'tlt.tltid = tlti.tltid');
    $query->join('tmgmt_job_item', 'tji', 'tji.tjiid = tlti.tjiid');
    $query->fields('tlt', array('tltid'));
    $query->addExpression('SUM(tji.word_count)', 'word_count');
    $query->addExpression('SUM(tlti.count_untranslated)', 'count_untranslated');
    $query->addExpression('SUM(tlti.count_translated)', 'count_translated');
    $query->addExpression('SUM(tlti.count_completed)', 'count_completed');
    $result = $query->groupBy('tlt.tltid')
      ->condition('tlt.tltid', $tltids_to_load)
      ->execute();

    foreach ($result as $row) {
      $return[$row->tltid] = $statistics[$row->tltid] = $row;
    }
  }
  return $return;

}

/**
 * Returns a specific statistic of a task.
 *
 * @param $task
 *   The translation task entity.
 * @param $key
 *   One of word_count, loop_count, count_pending, count_accepted and
 *   count_translated.
 *
 * @return
 *   The requested information as an integer.
 */
function tmgmt_local_task_statistic(TMGMTLocalTask $task, $key) {
  $statistics = tmgmt_local_task_statistics_load(array($task->tltid));
  if (isset($statistics[$task->tltid]->$key)) {
    return $statistics[$task->tltid]->$key;
  }
  return 0;
}

/**
 * Retrieve a labeled list of all available statuses.
 *
 * @return array
 *   A list of all available statuses.
 */
function tmgmt_local_task_statuses() {
  return $statuses = array(
    TMGMT_LOCAL_TASK_STATUS_UNASSIGNED => t('Unassigned'),
    TMGMT_LOCAL_TASK_STATUS_PENDING => t('Pending'),
    TMGMT_LOCAL_TASK_STATUS_COMPLETED => t('Completed'),
    TMGMT_LOCAL_TASK_STATUS_REJECTED => t('Rejected'),
    TMGMT_LOCAL_TASK_STATUS_CLOSED => t('Closed'),
  );
}

/**
 * Retrieve a labeled list of all available statuses for task items.
 *
 * @return array
 *   A list of all available statuses.
 */
function tmgmt_local_task_item_statuses() {
  return $statuses = array(
    TMGMT_LOCAL_TASK_ITEM_STATUS_PENDING => t('Untranslated'),
    TMGMT_LOCAL_TASK_ITEM_STATUS_COMPLETED => t('Translated'),
    TMGMT_LOCAL_TASK_ITEM_STATUS_REJECTED => t('Rejected'),
    TMGMT_LOCAL_TASK_ITEM_STATUS_CLOSED => t('Completed'),
  );
}

/**
 * Gets all involved language pairs for given tasks.
 *
 * @param array $tasks
 *   Array of tasks ids.
 *
 * @return array
 *   Array of involved languages.
 */
function tmgmt_local_tasks_languages($tasks) {
  $query = db_select('tmgmt_local_task', 't');
  $query->condition('tltid', $tasks);
  $query->join('tmgmt_job', 'j', 't.tjid = j.tjid');
  $query->fields('j', array('source_language', 'target_language'));
  $query->groupBy('target_language');
  $result = $query->execute()->fetchAll();
  $languages = array();

  foreach ($result as $row) {
    if (empty($languages[$row->source_language]) || !in_array($row->target_language, $languages[$row->source_language])) {
      $languages[$row->source_language][] = $row->target_language;
    }
  }

  return $languages;
}

/**
 * Return users that belongs to local translation role.
 *
 * @todo: This does not scale when having many translators.
 *
 * @return array
 *   Array of uid => name translators or empty array if there are no translator
 *   users.
 */
function tmgmt_local_translators($source_language = NULL, $target_language = NULL) {
  // Get all local user translators.
  $roles = user_roles(TRUE, 'provide translation services');
  $query = db_select('users', 'u');
  $query->fields('u', array('uid'));
  $query->condition('u.status', 1);

  // Add role condition only if authenticated user role does not have perms.
  if (!in_array(DRUPAL_AUTHENTICATED_RID, array_keys($roles))) {
    $query->leftJoin('users_roles', 'ur', 'u.uid = ur.uid');
    $query->condition('ur.rid', array_keys($roles));
  }

  $uids = $query->distinct()
    ->execute()
    ->fetchCol();

  if (!empty($target_language) && !is_array($target_language)) {
    $target_language = array($target_language);
  }

  $translators = array();
  if (!empty($uids)) {
    foreach (user_load_multiple($uids) as $user) {
      // @todo: There is no capabilities API yet for returning users, so
      //   re-check every user.
      $capabilities = tmgmt_local_translation_capabilities($source_language, $user);
      if (empty($capabilities)) {
        continue;
      }
      // In case provided target languages exceed users capabilities exclude.
      if (!empty($target_language) && count(array_diff($target_language, $capabilities)) > 0) {
        continue;
      }
      $translators[$user->uid] = entity_label('user', $user);
    }
  }

  return $translators;
}

/**
 * Gets translators able to translate all given tasks.
 *
 * @param array $tasks
 *   Array of tasks ids.
 *
 * @return array
 *   List of uid => name values.
 */
function tmgmt_local_get_translators_for_tasks($tasks) {
  $translators = array();

  foreach (tmgmt_local_tasks_languages($tasks) as $source_language => $target_languages) {
    $translators[] = tmgmt_local_translators($source_language, $target_languages);
  }

  if (count($translators) > 1) {
    return call_user_func_array('array_intersect', $translators);
  }

  return array_shift($translators);
}

/**
 * @} End of "addtogroup tmgmt_local_task".
 */

/**
 * Implements hook_tmgmt_job_item_update().
 *
 * @todo: Move this to the translator plugin API.
 */
function tmgmt_local_tmgmt_job_item_update(TMGMTJobItem $job_item) {
  if ($job_item->isAccepted() && !$job_item->original->isAccepted()) {
    $tltiid = db_query('SELECT tltiid FROM {tmgmt_local_task_item} ti INNER JOIN {tmgmt_local_task} t ON ti.tltid = t.tltid WHERE t.tjid = :tjid AND ti.tjiid = :tjiid', array(':tjid' => $job_item->tjid, ':tjiid' => $job_item->tjiid))->fetchField();
    if ($tltiid) {
      $task_item = tmgmt_local_task_item_load($tltiid);
      $task_item->closed();
      $task_item->save();

      // Check if the task can be marked as closed as well.
      $query = new EntityFieldQuery();
      $unclosed_tasks = $query->entityCondition('entity_type', 'tmgmt_local_task_item')
        ->propertyCondition('tltid', $task_item->tltid)
        ->propertyCondition('status', TMGMT_LOCAL_TASK_ITEM_STATUS_CLOSED, '<>')
        ->count()
        ->execute();
      if ($unclosed_tasks == 0) {
        $task = $task_item->getTask();
        $task->setStatus(TMGMT_LOCAL_TASK_STATUS_CLOSED);
        $task->save();
      }
    }
  }
}

/**
 * Implements hook_tmgmt_job_delete().
 */
function tmgmt_local_tmgmt_job_delete(TMGMTJob $job) {
  $query = new EntityFieldQuery();
  $result = $query
    ->entityCondition('entity_type', 'tmgmt_local_task')
    ->propertyCondition('tjid', $job->tjid)
    ->execute();
  if (!empty($result['tmgmt_local_task'])) {
    entity_delete_multiple('tmgmt_local_task', array_keys($result['tmgmt_local_task']));
  }
}


/**
 * Implements hook_field_access().
 */
function tmgmt_local_field_access($op, $field, $entity_type, $entity = NULL, $account = NULL) {
  if ($field['field_name'] == 'tmgmt_translation_skills' && $entity_type == 'user') {
    $account = !empty($account) ? $account : $GLOBALS['user'];

    // If the field is just being viewed, grant access.
    if ($op == 'view') {
      return TRUE;
    }

    // User can provide transl. services and is dealing with own account.
    if (!empty($entity) && $entity->uid == $account->uid) {
      return user_access('provide translation services', $entity);
    }

    // Administrators are allowed to deal with others only.
    if (user_access('administer translation server', $account)) {
      return TRUE;
    }

    return FALSE;
  }
}

/**
 * Implements hook_field_attach_insert().
 */
function tmgmt_local_field_attach_insert($entity_type, $entity) {
  if ($entity_type != 'user' || !array_intersect_key(user_roles(TRUE, 'provide translation services'), $entity->roles)) {
    return;
  }

  tmgmt_local_clear_languages_cache();
}

/**
 * Implements hook_field_attach_update().
 */
function tmgmt_local_field_attach_update($entity_type, $entity) {
  if ($entity_type != 'user' || !array_intersect_key(user_roles(TRUE, 'provide translation services'), $entity->roles)) {
    return;
  }

  tmgmt_local_clear_languages_cache();
}

/**
 * Implements hook_field_attach_delete().
 */
function tmgmt_local_field_attach_delete($entity_type, $entity) {
  if ($entity_type != 'user' || !array_intersect_key(user_roles(TRUE, 'provide translation services'), $entity->roles)) {
    return;
  }
  tmgmt_local_clear_languages_cache();
}

/**
 * Implements hook_tmgmt_local_translation_capabilities().
 */
function tmgmt_local_tmgmt_local_translation_capabilities($source_language = NULL, $account = NULL, $target_language = NULL) {
  // Only considers users with the 'provide translation services' permission.
  $roles = user_roles(TRUE, 'provide translation services');

  // Check for all the available languages. We are directly querying the
  // field values here instead of using an EntityFieldQuery but that is
  // okay in this case and there is no other way.
  $query = db_select('field_data_tmgmt_translation_skills', 'ts')
    ->fields('ts', array('tmgmt_translation_skills_language_from', 'tmgmt_translation_skills_language_to'))
    ->condition('ts.deleted', 0)
    ->condition('ts.entity_type', 'user')
    ->distinct(TRUE);

  if ($source_language) {
    $query->condition('ts.tmgmt_translation_skills_language_from', $source_language);
  }

  if ($target_language) {
    $query->condition('ts.tmgmt_translation_skills_language_to', $target_language);
  }

  // Only consider active users.
  $query->innerJoin('users', 'u', 'u.uid = ts.entity_id AND u.status = 1');

  if (isset($account)) {
    $query->condition('u.uid', $account->uid);
  }

  // Only consider users that have the 'provide translation services'
  // permission or the admin user.
  $query->leftJoin('users_roles', 'ur', "ur.uid = u.uid AND ur.rid IN (:roles) OR u.uid = 1", array(':roles' => implode(', ', array_keys($roles))));

  // Add a tag so other modules can alter this query at will.
  $query->addTag('tmgmt_translation_combination');

  // Only return languages that are supported by at least one user.
  $result = $query->execute();

  $combination = array();
  foreach ($result as $item) {
    $combination[] = array(
      'source' => $item->tmgmt_translation_skills_language_from,
      'target' => $item->tmgmt_translation_skills_language_to,
    );
  }

  return $combination;
}

/**
 * Implements hook_tmgmt_server_language_pairs().
 */
function tmgmt_local_tmgmt_server_language_pairs() {
  $roles = user_roles(TRUE, 'provide translation services');

  $query = db_select('field_data_tmgmt_translation_skills', 'ts');

  $query->join('users', 'u', 'u.uid = ts.entity_id AND u.status = 1');

  $query->addField('ts', 'tmgmt_translation_skills_language_from', 'source_language');
  $query->addField('ts', 'tmgmt_translation_skills_language_to', 'target_language');

  $query->condition('ts.deleted', 0);
  $query->condition('ts.entity_type', 'user');

  if (!in_array(DRUPAL_AUTHENTICATED_RID, array_keys($roles))) {
    $query->join('users_roles', 'ur', 'ur.uid = u.uid AND ur.rid');
    $or_conditions = db_or()->condition('ur.rid', array_keys($roles))->condition('u.uid', 1);
    $query->condition($or_conditions);
  }

  $combination = array();
  foreach ($query->execute()->fetchAll() as $item) {
    $combination[$item->source_language][$item->target_language] = $item->target_language;
  }

  return $combination;
}
