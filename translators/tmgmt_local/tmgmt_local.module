<?php

/**
 * @file
 * Main module file for the local translation module.
 */

/**
 * @defgroup tmgmt_local_task TMGMT Local Task
 * @{
 * Various local task API functions.
 */

/**
 * Local translation role.
 */
define('TMGMT_LOCAL_TRANSLATION_ROLE', 'local translator');

/**
 * Modules should return this value from hook_tmgmt_local_translation_access()
 * to allow access to a node.
 */
define('TMGMT_LOCAL_TRANSLATION_ACCESS_ALLOW', 'allow');

/**
 * Modules should return this value from hook_tmgmt_local_translation_access()
 * to deny access to a node.
 */
define('TMGMT_LOCAL_TRANSLATION_ACCESS_DENY', 'deny');

/**
 * Modules should return this value from hook_tmgmt_local_translation_access()
 * to not affect node access.
 */
define('TMGMT_LOCAL_TRANSLATION_ACCESS_IGNORE', NULL);

/**
 * Translation local task is not assigned to translator.
 */
define('TMGMT_LOCAL_TASK_STATUS_UNASSIGNED', 0);

/**
 * Translation local task is pending.
 */
define('TMGMT_LOCAL_TASK_STATUS_PENDING', 1);

/**
 * Translation local task is cokmpleted (all task items are accepted).
 */
define('TMGMT_LOCAL_TASK_STATUS_COMPLETED', 2);

/**
 * Translation local task is rejected (at least some task items are rejected).
 */
define('TMGMT_LOCAL_TASK_STATUS_REJECTED', 3);

/**
 * Translation local task is closed.
 *
 */
define('TMGMT_LOCAL_TASK_STATUS_CLOSED', 4);

/**
 * @} End of "tmgmt_local_task".
 */

/**
 * Implements hook_entity_info().
 */
function tmgmt_local_entity_info() {
  $info = array(
    'tmgmt_local_task' => array(
      'label' => t('Translation Management Local Task'),
      'module' => 'tmgmt_local_task',
      'entity class' => 'TMGMTLocalTask',
      'controller class' => 'TMGMTLocalTaskController',
      'metadata controller class' => 'TMGMTLocalTaskMetadataController',
      'views controller class' => 'TMGMTLocalTaskViewsController',
      'base table' => 'tmgmt_local_task',
      'uri callback' => 'entity_class_uri',
      'label callback' => 'entity_class_label',
      'access callback' => 'tmgmt_job_access',
      'entity keys' => array(
        'id' => 'tltid',
      ),
      'admin ui' => array(
        'controller class' => 'TMGMTLocalTaskUIController',
        'path' => 'admin/config/regional/tmgmt/local-tasks',
      ),
    ),
  );

  // Make use of the entity cache module if it is enabled.
  if (module_exists('entitycache')) {
    $info['tmgmt_local_task']['entity cache'] = TRUE;
    $info['tmgmt_local_task']['field cache'] = FALSE;
  }

  // @todo wtf? move this to the core tmgmt module.
  $info['tmgmt_translator']['views controller class'] = 'EntityDefaultViewsController';

  return $info;
}

/**
 * Implements hook_theme().
 */
function tmgmt_local_theme() {
  return array(
    'tmgmt_local_translation_form' => array(
      'render element' => 'element',
      'file' => 'includes/tmgmt_local.theme.inc',
    ),
    'tmgmt_local_translation_form_element' => array(
      'render element' => 'element',
      'file' => 'includes/tmgmt_local.theme.inc',
    ),
    // @todo - not implemented.
    'tmgmt_local_translation_form_element_status' => array(
      'render element' => 'status',
      'file' => 'includes/tmgmt_local.theme.inc',
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_local_menu() {
  $items['translate/%tmgmt_local_task/assign-to-me'] = array(
    'title' => 'Assign translation task to me',
    'description' => 'Assign translation task to current translator user.',
    'page callback' => 'tmgmt_local_translation_assign_to_me',
    'page arguments' => array(1),
    'access callback' => 'tmgmt_local_translation_access',
    'access arguments' => array(1),
    'file' => 'includes/tmgmt_local.forms.inc',
  );
  $items['manage-translate/assign-tasks'] = array(
    'title' => 'Assign translation task',
    'description' => 'Assign translation tasks to specific translator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_local_translation_assign_form', 2),
    'access arguments' => array('administer translation tasks'),
    'file' => 'includes/tmgmt_local.forms.inc',
    'type' => MENU_CALLBACK,
  );
  $items['manage-translate/reassign-tasks'] = array(
    'title' => 'Reassign translation task',
    'description' => 'Ressign translation tasks to specific translator.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_local_translation_reassign_form', 2),
    'access arguments' => array('administer translation tasks'),
    'file' => 'includes/tmgmt_local.forms.inc',
    'type' => MENU_CALLBACK,
  );
  $items['translate/%tmgmt_local_task/item/%tmgmt_job_item'] = array(
    'title' => 'Translate Task Item',
    'description' => 'Translate task item.',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_local_translation_form', 1, 3),
    'access callback' => 'tmgmt_local_translation_item_access',
    'access arguments' => array(1, 3),
    'file' => 'includes/tmgmt_local.forms.inc',
  );

  return $items;
}

/**
 * Implements hook_menu().
 */
function module_menu() {
  $items = array();

  $items['module'] = array(
    'title' => 'module',
    'description' => 'module',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('module_settings_form'),
    'access callback' => 'user_access',
    'access arguments' => array('administer module'),
    'weight' => 0,
    'menu_name' => 'Navigation',
    'type' => MENU_NORMAL_ITEM
  );

  return $items;
}

/**
 * Implements hook_permission().
 */
function tmgmt_local_permission() {
  return array(
    'provide translation services' => array(
      'title' => t('Provide translation services'),
      'descriptions' => t('Root permission for translation access: Users with this permission are eligible to be granted translation access to a translation task.'),
    ),
    'administer translation tasks' => array(
      'title' => t('Administer translation tasks'),
      'description' => t('Administer translation tasks.'),
    ),
  );
}

/**
 * Implements hook_views_api().
 */
function tmgmt_local_views_api() {
  return array(
    'api' => 3.0,
    'path' => drupal_get_path('module', 'tmgmt_local') . '/views',
  );
}

/**
 * Implements hook_default_views().
 */
function tmgmt_local_views_default_views() {
  return _tmgmt_load_exports('tmgmt_local', 'views', 'view.inc', 'view');
}

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_local_tmgmt_translator_plugin_info() {
  $info['local'] = array(
    'label' => t('Local Translator'),
    'description' => t('Allows local users to process translation jobs.'),
    'plugin controller class' => 'TMGMTLocalTranslatorPluginController',
    'ui controller class' => 'TMGMTLocalTranslatorUIController',
    'default settings' => array(
      'auto_accept' => TRUE,
    ),
  );

  return $info;
}

/**
 * @addtogroup tmgmt_local
 * @{
 */

/**
 * Determine whether the current user is allowed to translate a given
 * translation task.
 *
 * @param $task
 *   The translation task to be translated.
 * @param $account
 *   (Optional) A user object representing the user that is trying to obtain
 *   translation access. Determines access for a user other than the current
 *   user.
 * @return bool
 *   TRUE if the user is allowed to translate the given translation job, FALSE
 *   otherwise.
 */
function tmgmt_local_translation_access(TMGMTLocalTask $task, $account = NULL) {
  $job = $task->getJob();

  if (!$job->isActive()) {
    return FALSE;
  }

  $rights = &drupal_static(__FUNCTION__);

  // If no user object is supplied, the access check is for the current user.
  if (empty($account)) {
    $account = $GLOBALS['user'];
  }

  // If we've already checked access for this job and user, return from cache.
  if (isset($rights[$account->uid][$job->tjid])) {
    return $rights[$account->uid][$job->tjid];
  }

  // We grant access to the translation if both of the following conditions are
  // met:
  // - User has 'provide translation services' permission.
  // - No modules say to deny access.
  // - At least one module says to grant access.
  // - User has translation capabilities for this task.
  if (!user_access('provide translation services')) {
    $rights[$account->uid][$job->tjid] = FALSE;
    return FALSE;
  }

  $access = module_invoke_all('tmgmt_local_translation_access', $job, $account);
  if (in_array(TMGMT_LOCAL_TRANSLATION_ACCESS_DENY, $access, TRUE)) {
    $rights[$account->uid][$job->tjid] = FALSE;
    return FALSE;
  }
  elseif (in_array(TMGMT_LOCAL_TRANSLATION_ACCESS_ALLOW, $access, TRUE)) {
    $rights[$account->uid][$job->tjid] = TRUE;
    return TRUE;
  }

  // Lastly, check for the translation capabilities.
  $input = $job->source_language;
  $required = $job->target_language;
  $capabilities = tmgmt_local_translation_capabilities($input, $account);
  $rights[$account->uid][$job->tjid] = in_array($required, $capabilities);

  return $rights[$account->uid][$job->tjid];
}

/**
 * Implements hook_form_ID_alter().
 */
function tmgmt_local_form_user_register_form_alter(&$form, &$form_state) {
  if (!empty($form['administer_users']['#value']) && $form['#user']->uid == 0) {
    _tmgmt_local_user_roles_form_alter($form);
  }
}

/**
 * Implements hook_form_ID_alter().
 */
function tmgmt_local_form_user_profile_form_alter(&$form, &$form_state) {
  // If we have server module alter the roles form part.
  if (module_exists('tmgmt_server')) {
    _tmgmt_local_user_roles_form_alter($form);
  }
}

/**
 * We alter the roles checkboxes and add JS to control skills form part.
 *
 * @param array $form
 *   User form to be altered.
 */
function _tmgmt_local_user_roles_form_alter(&$form) {
  $tc_role = user_role_load(variable_get('tmgmt_server_tc_rid'));
  $ts_role = user_role_load(variable_get('tmgmt_local_ts_rid'));

  // Check if we have both roles. If not so, return as the logic would not work.
  if (empty($tc_role) || empty($ts_role)) {
    return;
  }

  $form['#attached']['js'][] = array(
    'data' => drupal_get_path('module', 'tmgmt_local') . '/js/tmgmt_local.js',
    'type' => 'file',
  );
  $form['#attached']['js'][] = array(
    'data' => array('tmgmt_local' => array(
      'tmgmt_server_tc_rid' => variable_get('tmgmt_server_tc_rid'),
      'tmgmt_local_ts_rid' => variable_get('tmgmt_local_ts_rid'),
    )),
    'type' => 'setting',
  );

  $form['account']['roles']['#description'] =
      t('Note that roles "%ts_role_name" and "%tc_role_name" are mutually exclusive and cannot be added to the same user.', array(
        '%ts_role_name' => $ts_role->name,
        '%tc_role_name' => $tc_role->name,
      ));
}

/**
 * Determine whether the current user is allowed to translate a given
 * translation task job item.
 *
 * @param $task
 *   The translation task.
 * @param $item
 *   The translation job item to be translated.
 * @param $account
 *   (Optional) A user object representing the user that is trying to obtain
 *   translation access. Determines access for a user other than the current
 *   user.
 * @return bool
 *   TRUE if the user is allowed to translate the given translation job item,
 *   FALSE otherwise.
 */
function tmgmt_local_translation_item_access(TMGMTLocalTask $task, TMGMTJobItem $item, $account = NULL) {
  // @todo - Add this back when we are sure based on which conditions the access
  // should be determined.
//  if (!$item->isActive() || !tmgmt_local_translation_access($item->getJob(), $account)) {
//    return FALSE;
//  }

  return TRUE;
}

/**
 * Determines the translation capabilities of a specific user or all users.
 *
 * @param $language
 *   The source language for which to check the translation capabilities for.
 * @param $account
 *   (Optional) A user object representing the user for whom to check the
 *   translation capabilities for.
 *
 * @return array
 *   An array of supported target languages.
 */
function tmgmt_local_translation_capabilities($language, $account = NULL) {
  $capabilities = &drupal_static(__FUNCTION__);
  $key = isset($account) ? $account->uid . ':' . $language : $language;

  if (!isset($capabilities[$key])) {
    $capabilities[$key] = module_invoke_all('tmgmt_local_translation_capabilities', $language, $account);
  }

  return $capabilities[$key];
}

/**
 * Helper function for clearing the languages cache of all local translators.
 *
 * Can be used in oder to clear the cache for supported target languages after
 * the translation capabilities of an local have changed.
 */
function tmgmt_local_clear_languages_cache() {
  foreach (tmgmt_translator_load_multiple(FALSE) as $translator) {
    if ($translator->plugin == 'local') {
      cache_clear_all('languages::' . $translator->plugin, 'cache_tmgmt');
    }
  }
}

/**
 * Determines if job item data items are completed - not pending.
 */
function tmgmt_local_translation_item_completed(TMGMTJobItem $item) {
  $data = tmgmt_flatten_data($item->getData());
  $data = array_filter($data, '_tmgmt_filter_data');

  $completed = TRUE;
  foreach ($data as $item) {
    if (empty($item['#status']) || $item['#status'] == TMGMT_DATA_ITEM_STATE_PENDING) {
      $completed = FALSE;
      break;
    }
  }

  return $completed;
}

/**
 * Prepares a language code list for a select form item with all languages.
 */
function tmgmt_local_languages_predefined_list() {
  $predefined = &drupal_static(__FUNCTION__);

  if (!isset($predefined)) {
    include_once DRUPAL_ROOT . '/includes/iso.inc';
    $predefined = _locale_get_predefined_list();

    foreach ($predefined as $key => $value) {

      // Include native name in output, if possible
      if (count($value) > 1) {
        $tname = t($value[0]);
        $predefined[$key] = ($tname == $value[1]) ? $tname : "$tname ($value[1])";
      }
      else {
        $predefined[$key] = t($value[0]);
      }
    }

    // Add custom languages that are not part of the iso.inc definition.
    $installed_languages = language_list();
    foreach ($installed_languages as $lang => $info) {
      if (!isset($predefined[$lang])) {
        $predefined[$lang] = $info->name;
      }
    }

    asort($predefined);
  }

  return $predefined;
}

/**
 * Loads a local translation task entity.
 */
function tmgmt_local_task_load($tltid) {
  $tasks = tmgmt_local_task_load_multiple(array($tltid), array());
  return $tasks ? reset($tasks) : FALSE;
}

/**
 * Loads local translation tasks entity.
 */
function tmgmt_local_task_load_multiple(array $tltids = array(), $conditions = array()) {
  return entity_load('tmgmt_local_task', $tltids, $conditions);
}

/**
 * Creates a translation task entity.
 *
 * @param $values
 *   (Optional) An array of additional entity values.
 *
 * @return TMGMTLocalTask
 *   The local translation task entity.
 */
function tmgmt_local_task_create(array $values = array()) {
  return entity_create('tmgmt_local_task', $values);
}

/**
 * Saves a local task entity to the database.
 *
 * @param $task
 *   The local task entity object.
 */
function tmgmt_local_task_save(TMGMTLocalTask $task) {
  return entity_save('tmgmt_local_task', $task);
}

/**
 * Deletes a local task entity.
 */
function tmgmt_local_task_delete(TMGMTLocalTask $task) {
  entity_delete('tmgmt_local_task', $task->tltid);
}

/**
 * Delete multiple local tasks entities.
 *
 * @param $tltids
 *   An array of local tasks IDs.
 */
function tmgmt_local_task_delete_multiple(array $tltids) {
  entity_get_controller('tmgmt_local_task')->delete($tltids);
}

/**
 * Access callback for the local task entity.
 *
 * @param $op
 *   The operation being performed.
 * @param $item
 *   (Optional) A TMGMTLocalTask entity to check access for. If no entity is
 *   given, it will be determined whether access is allowed for all entities.
 * @param $account
 *   (Optional) The user to check for. Leave it to NULL to check for the global
 *   user.
 *
 * @return boolean
 *   TRUE if access is allowed, FALSE otherwise.
 */
function tmgmt_local_task_access($op, $task = NULL, $account = NULL) {
  if (user_access('administer tmgmt', $account)) {
    // Administrators can do everything.
    return TRUE;
  }

  // @todo - probably need refinement when we introduce more module permissions.
  switch ($op) {
    case 'create':
    case 'view':
    case 'edit':
    case 'delete':
      return user_access('administer tmgmt local tasks', $account);
      break;
  }
}

/**
 * Loads an array with the word and status statistics of a task.
 *
 * @param $tltids
 *   An array of local task ids.
 *
 * @return
 *   An array of objects with the keys word_count, count_pending,
 *   count_approved, count_translated and loop_count.
 */
function tmgmt_local_task_statistics_load(array $tltids) {
  $statistics = &drupal_static(__FUNCTION__, array());

  // @todo - we should use local_task-job_item connector table and then sum them.

  // First try to get the values from the cache.
  $return = array();
  $tltids_to_load = array();
  foreach ($tltids as $tltid) {
    if (isset($statistics[$tltid])) {
      // Info exists in cache, get it from there.
      $return[$tltid] = $statistics[$tltid];
    }
    else {
      // Info doesn't exist in cache, add job to the list that needs to be
      // fetched.
      $tltids_to_load[] = $tltid;
    }
  }

  // If there are remaining jobs, build a query to fetch them.
  if (!empty($tltids_to_load)) {
    // Build the query to fetch the statistics.
    $query = db_select('tmgmt_job_item', 'tji');
    $query->join('tmgmt_local_task', 'tlt', 'tlt.tjid = tji.tjid');
    $query->fields('tlt', array('tltid'));
    $query->addExpression('SUM(word_count)', 'word_count');
    $query->addExpression('SUM(count_approved)', 'count_approved');
    $query->addExpression('SUM(count_pending)', 'count_pending');
    $query->addExpression('SUM(count_translated)', 'count_translated');
    $result = $query->groupBy('tlt.tjid')
      ->condition('tltid', $tltids_to_load)
      ->execute();

    foreach ($result as $row) {
      $return[$row->tltid] = $statistics[$row->tltid] = $row;
    }
  }
  return $return;

}

/**
 * Returns a specific statistic of a task.
 *
 * @param $task
 *   The translation local task entity.
 * @param $key
 *   One of word_count, loop_count, count_pending, count_approved and
 *   count_translated.
 *
 * @return
 *   The requested information as an integer.
 */
function tmgmt_local_task_statistic(TMGMTLocalTask $task, $key) {
  $statistics = tmgmt_local_task_statistics_load(array($task->tltid));
  if (isset($statistics[$task->tltid]->$key)) {
    return $statistics[$task->tltid]->$key;
  }
  return 0;
}

/**
 * Retrieve a labeled list of all available statuses.
 *
 * @return array
 *   A list of all available statuses.
 */
function tmgmt_local_task_statuses() {
  return $statuses = array(
    TMGMT_LOCAL_TASK_STATUS_UNASSIGNED => t('Unassigned'),
    TMGMT_LOCAL_TASK_STATUS_PENDING => t('Pending'),
    TMGMT_LOCAL_TASK_STATUS_COMPLETED => t('Completed'),
    TMGMT_LOCAL_TASK_STATUS_REJECTED => t('Rejected'),
    TMGMT_LOCAL_TASK_STATUS_CLOSED => t('Closed'),
  );
}

/**
 * Return users that belongs to local translation role.
 *
 * @return array
 *   Array of uid => name translators or empty array if there are no translator
 *   users.
 */
function tmgmt_local_translators() {
  // Get all local user translators.
  $role = user_role_load_by_name(TMGMT_LOCAL_TRANSLATION_ROLE);
  $query = db_select('users_roles', 'ur');
  $query->join('users', 'u', 'u.uid = ur.uid');
  $users = $query->fields('u', array('uid', 'name'))
    ->condition('ur.rid', $role->rid)
    ->condition('u.status', 1)
    ->execute()
    ->fetchAll();

  $translators = array();
  if (!empty($users)) {
    foreach ($users as $user) {
      $translators[$user->uid] = check_plain($user->name);
    }
  }

  return $translators;
}

/**
 * @} End of "addtogroup tmgmt_local_task".
 */
