<?php

/**
 * Implements hook_field_validate().
 */
function tmgmt_language_combination_field_validate($entity_type, $entity, $field, $instance, $langcode, $items, &$errors) {
  $existing = array();

  foreach ($items as $delta => $item) {
    $key = $item['language_from'] . ':' . $item['language_to'];

    if (!tmgmt_language_combination_field_is_empty($item, 'tmgmt_language_combination')) {
      if ($item['language_from'] == $item['language_to']) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'tmgmt_language_combination_equal',
          'message' => t("%name: The 'from' and 'to' language fields can't have the same value.", array('%name' => $instance['label'])),
        );
      }

      if (isset($existing[$key])) {
        $errors[$field['field_name']][$langcode][$delta][] = array(
          'error' => 'tmgmt_language_combination_equal',
          'message' => t('%name: The language combination has to be unique.', array('%name' => $instance['label'])),
        );
      }
    }

    $existing[$key] = TRUE;
  }
}

/**
 * Implements hook_field_widget_error().
 */
function tmgmt_language_combination_field_widget_error($element, $error, $form, &$form_state) {
  form_error($element, $error['message']);
}

/**
 * Implements hook_field_update().
 */
function tmgmt_language_combination_field_update($entity_type, $entity, $field, $instance, $langcode, &$items) {
  $languages = language_list();
  $added_languages = array();

  // In case the skill languages is not know to the system, install them.
  foreach ($items as $item) {
    if (!isset($languages[$item['language_to']]) && !isset($added_languages[$item['language_to']])) {
      locale_add_language($item['language_to']);
      $added_languages[$item['language_to']] = $item['language_to'];
    }
    if (!isset($languages[$item['language_from']]) && !isset($added_languages[$item['language_from']])) {
      locale_add_language($item['language_from']);
      $added_languages[$item['language_from']] = $item['language_from'];
    }
  }
}

/**
 * Returns the label of a language.
 *
 * @todo Remove this once the core language label function is fixed.
 *
 * @param $language
 *   A language in ISO format.
 * @return string
 *   The label of the language or an empty string if the language or its label
 *   are not defined.
 */
function tmgmt_language_combination_language_label($language) {
  $languages = tmgmt_language_combination_languages_predefined_list();
  if (!empty($languages[$language])) {
    return $languages[$language];
  }
  return '';
}

/**
 * Prepares a language code list for a select form item with all languages.
 */
function tmgmt_language_combination_languages_predefined_list() {
  $predefined = &drupal_static(__FUNCTION__);

  if (!isset($predefined)) {
    include_once DRUPAL_ROOT . '/includes/iso.inc';
    $predefined = _locale_get_predefined_list();

    foreach ($predefined as $key => $value) {

      // Include native name in output, if possible
      if (count($value) > 1) {
        $tname = t($value[0]);
        $predefined[$key] = ($tname == $value[1]) ? $tname : "$tname ($value[1])";
      }
      else {
        $predefined[$key] = t($value[0]);
      }
    }

    // Add custom languages that are not part of the iso.inc definition.
    $installed_languages = language_list();
    foreach ($installed_languages as $lang => $info) {
      if (!isset($predefined[$lang])) {
        $predefined[$lang] = $info->name;
      }
    }

    asort($predefined);
  }

  return $predefined;
}
