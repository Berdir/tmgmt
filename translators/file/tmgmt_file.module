<?php

/**
 * @file
 * Module file of the translation management test module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_file_tmgmt_translator_plugin_info() {
  return array(
    'file' => array(
      'label' => t('File translator'),
      'description' => t('File translator that exports and imports files.'),
      'plugin controller class' => 'TMGMTFileTranslatorPluginController',
      'ui controller class' => 'TMGMTFileTranslatorUIController',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tmgmt_file_theme() {
  return array(
    'tmgmt_file_html_template' => array(
      'path' => drupal_get_path('module', 'tmgmt_file') . '/templates',
      'template' => 'tmgmt_file_html_template',
    ),
  );
}

/**
 * Implements hook_permission().
 */
function tmgmt_file_permission() {
  return array(
    'import translated tmgmt files' => array(
      'label' => t('Import translated tmgmt files'),
    ),
  );
}

/**
 * Implements hook_menu().
 */
function tmgmt_file_menu() {
  $items['admin/config/regional/tmgmt/file'] = array(
    'type' => MENU_LOCAL_TASK,
    'title' => 'File Import',
    'page callback' => 'drupal_get_form',
    'page arguments' => array('tmgmt_file_import_form'),
    'access arguments' => array('import translated tmgmt files'),
  );
  return $items;
}

/**
 * Import form.
 */
function tmgmt_file_import_form($form) {
  $form['file'] = array(
    '#type' => 'file',
    '#title' => t('HTML or XLIFF'),
    '#size' => 50,
    '#description' => t('A translated HTML or XLIFF File'),
  );
  $form['import']['submit'] = array(
    '#type' => 'submit',
    '#value' => t('Import'),
  );
  return $form;
}

/**
 * Import form submit callback.
 */
function tmgmt_file_import_form_submit($form, &$form_state) {
  // Ensure we have the file uploaded
  if ($file = file_save_upload('file', array('file_validate_extensions' => array('html xlf')))) {
    if ($file->filemime != 'text/html') {
      $xliff = new DOMDocument;
      $xliff->load($file->uri);

      $xsl = new DOMDocument;
      $xsl->load(drupal_get_path('module', 'tmgmt_file') . '/xsl/xliff2xml.xsl');

      $proc = new XSLTProcessor();
      $proc->ImportStyleSheet($xsl);

      $xml = simplexml_import_dom($proc->transformToDoc($xliff));
      if (!isset($xml)) {
        drupal_set_message(t('Malformed XLIFF file.'));
        return;
      }

      $job = (array) $xml->head->meta[1];
      $source_language = (array) $xml->head->meta[2];
      $target_language = (array) $xml->head->meta[3];
      $items = (array) $xml->body->div;

      $html = theme('tmgmt_file_html_template', array(
        'tjid' => $job['@attributes']['content'],
        'source_language' => $source_language['@attributes']['content'],
        'target_language' => $target_language['@attributes']['content'],
        'items' => $items['div']));

      // @todo RECKECK! $items array does not meet the expected structure.
    }
    else {
      $html = file_get_contents($file->uri);
    }

    $file_obj = new simple_file_dom();
    $file_obj->load($html);

    $JobID = $file_obj->find('meta[name=JobID]', 0)->content;
    $source_language = $file_obj->find('meta[name=languageSource]', 0)->content;
    $target_language = $file_obj->find('meta[name=languageTarget]', 0)->content;

    if (empty($JobID) && !is_numeric($JobID)) {
      drupal_set_message(t('No JobID found'), 'error');
      return;
    }
    if (empty($source_language)) {
      drupal_set_message(t('No languageSource found'), 'error');
      return;
    }
    if (empty($target_language)) {
      drupal_set_message(t('No languageTarget found'), 'error');
      return;
    }

    $job = tmgmt_job_load($JobID);

    if ($job->source_language != $source_language) {
      drupal_set_message(t('Source language of file does not match source language of job'), 'error');
      return;
    }

    if ($job->target_language != $target_language) {
      drupal_set_message(t('Target language of file does not match target language of job'), 'error');
      return;
    }

    $items = $job->getItems();

    foreach ($file_obj->find('div.asset') as $asset) {
      //assets are our jobitem ids
      if (!isset($items[$asset->id])) {
        drupal_set_message(t('Job item: @jobitem does not exist', array('@jobitem' => $asset->id)), 'error');
        continue;
      }
      $item = $items[$asset->id];
      unset($items[$asset->id]);
      $SourceDataArray = tmgmt_flatten_data($item->getSourceData());
      foreach ($asset->find('div.atom') as $atom) {
        //assets are our strings (eq fields in nodes)
        if (!isset($SourceDataArray[$atom->id])) {
          drupal_set_message(t('String item: @stringitem does not exist', array('@stringitem' => $atom->id)), 'error');
          continue;
        }
        $SourceDataArray[$atom->id]['#text'] = $atom->innertext;
      }
      $item->addTranslatedData(tmgmt_unflatten_data($SourceDataArray));
    }
    if (!empty($items)) {
      drupal_set_message(t('There where missing translations for these Job items: @jobitems', array('@jobitems' => implode(", ", array_keys($items)))), 'error');
    }
    drupal_set_message(t("Translation for Job: @jobid imported", array('@jobid' => $JobID)));
    $job->needsReview('Translation imported');
  }
}
