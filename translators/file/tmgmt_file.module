<?php

/**
 * @file
 * Module file of the translation management test module.
 */

/**
 * Implements hook_tmgmt_translator_plugin_info().
 */
function tmgmt_file_tmgmt_translator_plugin_info() {
  return array(
    'file' => array(
      'label' => t('File translator'),
      'description' => t('File translator that exports and imports files.'),
      'plugin controller class' => 'TMGMTFileTranslatorPluginController',
      'ui controller class' => 'TMGMTFileTranslatorUIController',
    ),
  );
}

/**
 * Implements hook_theme().
 */
function tmgmt_file_theme() {
  return array(
    'tmgmt_file_html_template' => array(
      'path' => drupal_get_path('module', 'tmgmt_file') . '/templates',
      'template' => 'tmgmt_file_html_template',
    ),
  );
}

/**
 * Import form submit callback.
 */
function tmgmt_file_import_form_submit($form, &$form_state) {
  // Ensure we have the file uploaded.

  $job = $form_state['tmgmt_job'];

  $supported_formats = array_keys(tmgmt_file_format_plugin_info());
  if ($file = file_save_upload('file', array('file_validate_extensions' => array(implode(' ', $supported_formats))))) {

    $extension = pathinfo($file->uri, PATHINFO_EXTENSION);
    $controller = tmgmt_file_format_controller($extension);
    if ($controller) {
      // Validate the file.
      $validated_job = $controller->validateImport($file->uri);
      if (!$validated_job) {
        $job->addMessage('Failed to validate file, import aborted.', array(), 'error');
      }
      else if ($validated_job->tjid != $job->tjid) {
        $uri = $validated_job->uri();
        $label = $validated_job->label();
        $this->addMessage('Import file is from job <a href="@url">@label</a>, import aborted.', array('@url' => url($uri['path']), '@label' => $label));
      }
      else {
        try {
          // Validation successful, start import.
          $job->addTranslatedData($controller->import($file->uri));
          $job->addMessage('Sucessfully imported file.');
        } catch (Exception $e) {
          $job->addMessage('File import failed with the following message: @message', array('@message' => $e->getMessage()), 'error');
        }
      }
    }
  }
  foreach ($job->getMessagesSince() as $message) {
    // Ignore debug messages.
    if ($message->type == 'debug') {
      continue;
    }
    if ($text = $message->getMessage()) {
      drupal_set_message(filter_xss($text), $message->type);
    }
  }
}

/**
 * Returns information about file format plugins.
 *
 * @param $plugin
 *   (Optional) Name of a plugin/extension.
 *
 * @return
 *   If a plugin name is provided, information about that plugin, an array of
 *   plugin information otherwise. The information of each plugin consists of
 *   the label and plugin controller class, keyed by the plugin name which is
 *   also the extension for that file format.
 */
function tmgmt_file_format_plugin_info($plugin = NULL) {
  return _tmgmt_plugin_info('file_format', $plugin);
}

/**
 * Returns an array of file format plugin labels.
 */
function tmgmt_file_format_plugin_labels() {
  return _tmgmt_plugin_labels('file_format');
}

/**
 * Returns the file format plugin controller.
 *
 * @return
 *   Either a specific file format plugin controller instance or an array of
 *   available controllers.
 */
function tmgmt_file_format_controller($plugin = NULL) {
  return _tmgmt_plugin_controller('file_format', $plugin);
}

/**
 * Implements hook_tmgmt_file_format_info().
 */
function tmgmt_file_tmgmt_file_format_plugin_info() {
  return array(
    'xlf' => array(
      'label' => t('XLIFF'),
      'plugin controller class' => 'TMGMTFileFormatXLIFF',
    ),
    'html' => array(
      'label' => t('HTML'),
      'plugin controller class' => 'TMGMTFileFormatHTML',
    ),
  );
}
